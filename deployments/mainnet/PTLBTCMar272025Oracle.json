{
  "address": "0xe06Aa134e8E3a207388521eD494f99811A73abAA",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TwapDurationTooLow",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BASE_18",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "YEAR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "description",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enableBalanceCheck",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "latestAnswer",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "contract IPMarket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maturity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxLowerBound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxUpperBound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IAaveOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rawPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sy",
      "outputs": [
        {
          "internalType": "contract IStandardizedYield",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "twapDuration",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x23c88bd64d1fb9172d4926f5c941c417baa16d725f374a823faf7ceafa8d67f4",
  "receipt": {
    "to": null,
    "from": "0x0F6e98A756A40dD050dC78959f45559F98d3289d",
    "contractAddress": "0xe06Aa134e8E3a207388521eD494f99811A73abAA",
    "transactionIndex": 41,
    "gasUsed": "1913685",
    "logsBloom": "0x
    "blockHash": "0x17340f433d3411098571966e11d53b56ab0467d09ec3317d8becd93eaa3811af",
    "transactionHash": "0x23c88bd64d1fb9172d4926f5c941c417baa16d725f374a823faf7ceafa8d67f4",
    "logs": [],
    "blockNumber": 21181008,
    "cumulativeGasUsed": "6547037",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "cc0062939cd644dedfd18d54af0bd65c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TwapDurationTooLow\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BASE_18\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"YEAR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"description\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enableBalanceCheck\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"latestAnswer\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"contract IPMarket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maturity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxLowerBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxUpperBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IAaveOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rawPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sy\",\"outputs\":[{\"internalType\":\"contract IStandardizedYield\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"twapDuration\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Zerolend.\",\"kind\":\"dev\",\"methods\":{\"latestAnswer()\":{\"details\":\"This function gives the latest answer in 8 decimals.\"}},\"title\":\"PTLBTCMar272025Oracle\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"oracle()\":{\"notice\":\"The address of the asset to USD aggregator\"},\"twapDuration()\":{\"notice\":\"The duration of the TWAP used to calculate the PT price\"}},\"notice\":\"Gives the price of PT-LBTC in ETH in base 8\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/pendle/implementations/mainnet/PTLBTCMar272025Oracle.sol\":\"PTLBTCMar272025Oracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@pendle/core-v2/contracts/core/Market/MarketMathCore.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/math/PMath.sol\\\";\\nimport \\\"../libraries/math/LogExpMath.sol\\\";\\n\\nimport \\\"../StandardizedYield/PYIndex.sol\\\";\\nimport \\\"../libraries/MiniHelpers.sol\\\";\\nimport \\\"../libraries/Errors.sol\\\";\\n\\nstruct MarketState {\\n    int256 totalPt;\\n    int256 totalSy;\\n    int256 totalLp;\\n    address treasury;\\n    /// immutable variables ///\\n    int256 scalarRoot;\\n    uint256 expiry;\\n    /// fee data ///\\n    uint256 lnFeeRateRoot;\\n    uint256 reserveFeePercent; // base 100\\n    /// last trade data ///\\n    uint256 lastLnImpliedRate;\\n}\\n\\n// params that are expensive to compute, therefore we pre-compute them\\nstruct MarketPreCompute {\\n    int256 rateScalar;\\n    int256 totalAsset;\\n    int256 rateAnchor;\\n    int256 feeRate;\\n}\\n\\n// solhint-disable ordering\\nlibrary MarketMathCore {\\n    using PMath for uint256;\\n    using PMath for int256;\\n    using LogExpMath for int256;\\n    using PYIndexLib for PYIndex;\\n\\n    int256 internal constant MINIMUM_LIQUIDITY = 10 ** 3;\\n    int256 internal constant PERCENTAGE_DECIMALS = 100;\\n    uint256 internal constant DAY = 86400;\\n    uint256 internal constant IMPLIED_RATE_TIME = 365 * DAY;\\n\\n    int256 internal constant MAX_MARKET_PROPORTION = (1e18 * 96) / 100;\\n\\n    using PMath for uint256;\\n    using PMath for int256;\\n\\n    /*///////////////////////////////////////////////////////////////\\n                UINT FUNCTIONS TO PROXY TO CORE FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function addLiquidity(\\n        MarketState memory market,\\n        uint256 syDesired,\\n        uint256 ptDesired,\\n        uint256 blockTime\\n    ) internal pure returns (uint256 lpToReserve, uint256 lpToAccount, uint256 syUsed, uint256 ptUsed) {\\n        (int256 _lpToReserve, int256 _lpToAccount, int256 _syUsed, int256 _ptUsed) = addLiquidityCore(\\n            market,\\n            syDesired.Int(),\\n            ptDesired.Int(),\\n            blockTime\\n        );\\n\\n        lpToReserve = _lpToReserve.Uint();\\n        lpToAccount = _lpToAccount.Uint();\\n        syUsed = _syUsed.Uint();\\n        ptUsed = _ptUsed.Uint();\\n    }\\n\\n    function removeLiquidity(\\n        MarketState memory market,\\n        uint256 lpToRemove\\n    ) internal pure returns (uint256 netSyToAccount, uint256 netPtToAccount) {\\n        (int256 _syToAccount, int256 _ptToAccount) = removeLiquidityCore(market, lpToRemove.Int());\\n\\n        netSyToAccount = _syToAccount.Uint();\\n        netPtToAccount = _ptToAccount.Uint();\\n    }\\n\\n    function swapExactPtForSy(\\n        MarketState memory market,\\n        PYIndex index,\\n        uint256 exactPtToMarket,\\n        uint256 blockTime\\n    ) internal pure returns (uint256 netSyToAccount, uint256 netSyFee, uint256 netSyToReserve) {\\n        (int256 _netSyToAccount, int256 _netSyFee, int256 _netSyToReserve) = executeTradeCore(\\n            market,\\n            index,\\n            exactPtToMarket.neg(),\\n            blockTime\\n        );\\n\\n        netSyToAccount = _netSyToAccount.Uint();\\n        netSyFee = _netSyFee.Uint();\\n        netSyToReserve = _netSyToReserve.Uint();\\n    }\\n\\n    function swapSyForExactPt(\\n        MarketState memory market,\\n        PYIndex index,\\n        uint256 exactPtToAccount,\\n        uint256 blockTime\\n    ) internal pure returns (uint256 netSyToMarket, uint256 netSyFee, uint256 netSyToReserve) {\\n        (int256 _netSyToAccount, int256 _netSyFee, int256 _netSyToReserve) = executeTradeCore(\\n            market,\\n            index,\\n            exactPtToAccount.Int(),\\n            blockTime\\n        );\\n\\n        netSyToMarket = _netSyToAccount.neg().Uint();\\n        netSyFee = _netSyFee.Uint();\\n        netSyToReserve = _netSyToReserve.Uint();\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                    CORE FUNCTIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function addLiquidityCore(\\n        MarketState memory market,\\n        int256 syDesired,\\n        int256 ptDesired,\\n        uint256 blockTime\\n    ) internal pure returns (int256 lpToReserve, int256 lpToAccount, int256 syUsed, int256 ptUsed) {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (syDesired == 0 || ptDesired == 0) revert Errors.MarketZeroAmountsInput();\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        if (market.totalLp == 0) {\\n            lpToAccount = PMath.sqrt((syDesired * ptDesired).Uint()).Int() - MINIMUM_LIQUIDITY;\\n            lpToReserve = MINIMUM_LIQUIDITY;\\n            syUsed = syDesired;\\n            ptUsed = ptDesired;\\n        } else {\\n            int256 netLpByPt = (ptDesired * market.totalLp) / market.totalPt;\\n            int256 netLpBySy = (syDesired * market.totalLp) / market.totalSy;\\n            if (netLpByPt < netLpBySy) {\\n                lpToAccount = netLpByPt;\\n                ptUsed = ptDesired;\\n                syUsed = (market.totalSy * lpToAccount).rawDivUp(market.totalLp);\\n            } else {\\n                lpToAccount = netLpBySy;\\n                syUsed = syDesired;\\n                ptUsed = (market.totalPt * lpToAccount).rawDivUp(market.totalLp);\\n            }\\n        }\\n\\n        if (lpToAccount <= 0 || syUsed <= 0 || ptUsed <= 0) revert Errors.MarketZeroAmountsOutput();\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        market.totalSy += syUsed;\\n        market.totalPt += ptUsed;\\n        market.totalLp += lpToAccount + lpToReserve;\\n    }\\n\\n    function removeLiquidityCore(\\n        MarketState memory market,\\n        int256 lpToRemove\\n    ) internal pure returns (int256 netSyToAccount, int256 netPtToAccount) {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (lpToRemove == 0) revert Errors.MarketZeroAmountsInput();\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        netSyToAccount = (lpToRemove * market.totalSy) / market.totalLp;\\n        netPtToAccount = (lpToRemove * market.totalPt) / market.totalLp;\\n\\n        if (netSyToAccount == 0 && netPtToAccount == 0) revert Errors.MarketZeroAmountsOutput();\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        market.totalLp = market.totalLp.subNoNeg(lpToRemove);\\n        market.totalPt = market.totalPt.subNoNeg(netPtToAccount);\\n        market.totalSy = market.totalSy.subNoNeg(netSyToAccount);\\n    }\\n\\n    function executeTradeCore(\\n        MarketState memory market,\\n        PYIndex index,\\n        int256 netPtToAccount,\\n        uint256 blockTime\\n    ) internal pure returns (int256 netSyToAccount, int256 netSyFee, int256 netSyToReserve) {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n        if (market.totalPt <= netPtToAccount)\\n            revert Errors.MarketInsufficientPtForTrade(market.totalPt, netPtToAccount);\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        MarketPreCompute memory comp = getMarketPreCompute(market, index, blockTime);\\n\\n        (netSyToAccount, netSyFee, netSyToReserve) = calcTrade(market, comp, index, netPtToAccount);\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        _setNewMarketStateTrade(market, comp, index, netPtToAccount, netSyToAccount, netSyToReserve, blockTime);\\n    }\\n\\n    function getMarketPreCompute(\\n        MarketState memory market,\\n        PYIndex index,\\n        uint256 blockTime\\n    ) internal pure returns (MarketPreCompute memory res) {\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n\\n        uint256 timeToExpiry = market.expiry - blockTime;\\n\\n        res.rateScalar = _getRateScalar(market, timeToExpiry);\\n        res.totalAsset = index.syToAsset(market.totalSy);\\n\\n        if (market.totalPt == 0 || res.totalAsset == 0)\\n            revert Errors.MarketZeroTotalPtOrTotalAsset(market.totalPt, res.totalAsset);\\n\\n        res.rateAnchor = _getRateAnchor(\\n            market.totalPt,\\n            market.lastLnImpliedRate,\\n            res.totalAsset,\\n            res.rateScalar,\\n            timeToExpiry\\n        );\\n        res.feeRate = _getExchangeRateFromImpliedRate(market.lnFeeRateRoot, timeToExpiry);\\n    }\\n\\n    function calcTrade(\\n        MarketState memory market,\\n        MarketPreCompute memory comp,\\n        PYIndex index,\\n        int256 netPtToAccount\\n    ) internal pure returns (int256 netSyToAccount, int256 netSyFee, int256 netSyToReserve) {\\n        int256 preFeeExchangeRate = _getExchangeRate(\\n            market.totalPt,\\n            comp.totalAsset,\\n            comp.rateScalar,\\n            comp.rateAnchor,\\n            netPtToAccount\\n        );\\n\\n        int256 preFeeAssetToAccount = netPtToAccount.divDown(preFeeExchangeRate).neg();\\n        int256 fee = comp.feeRate;\\n\\n        if (netPtToAccount > 0) {\\n            int256 postFeeExchangeRate = preFeeExchangeRate.divDown(fee);\\n            if (postFeeExchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(postFeeExchangeRate);\\n\\n            fee = preFeeAssetToAccount.mulDown(PMath.IONE - fee);\\n        } else {\\n            fee = ((preFeeAssetToAccount * (PMath.IONE - fee)) / fee).neg();\\n        }\\n\\n        int256 netAssetToReserve = (fee * market.reserveFeePercent.Int()) / PERCENTAGE_DECIMALS;\\n        int256 netAssetToAccount = preFeeAssetToAccount - fee;\\n\\n        netSyToAccount = netAssetToAccount < 0\\n            ? index.assetToSyUp(netAssetToAccount)\\n            : index.assetToSy(netAssetToAccount);\\n        netSyFee = index.assetToSy(fee);\\n        netSyToReserve = index.assetToSy(netAssetToReserve);\\n    }\\n\\n    function _setNewMarketStateTrade(\\n        MarketState memory market,\\n        MarketPreCompute memory comp,\\n        PYIndex index,\\n        int256 netPtToAccount,\\n        int256 netSyToAccount,\\n        int256 netSyToReserve,\\n        uint256 blockTime\\n    ) internal pure {\\n        uint256 timeToExpiry = market.expiry - blockTime;\\n\\n        market.totalPt = market.totalPt.subNoNeg(netPtToAccount);\\n        market.totalSy = market.totalSy.subNoNeg(netSyToAccount + netSyToReserve);\\n\\n        market.lastLnImpliedRate = _getLnImpliedRate(\\n            market.totalPt,\\n            index.syToAsset(market.totalSy),\\n            comp.rateScalar,\\n            comp.rateAnchor,\\n            timeToExpiry\\n        );\\n\\n        if (market.lastLnImpliedRate == 0) revert Errors.MarketZeroLnImpliedRate();\\n    }\\n\\n    function _getRateAnchor(\\n        int256 totalPt,\\n        uint256 lastLnImpliedRate,\\n        int256 totalAsset,\\n        int256 rateScalar,\\n        uint256 timeToExpiry\\n    ) internal pure returns (int256 rateAnchor) {\\n        int256 newExchangeRate = _getExchangeRateFromImpliedRate(lastLnImpliedRate, timeToExpiry);\\n\\n        if (newExchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(newExchangeRate);\\n\\n        {\\n            int256 proportion = totalPt.divDown(totalPt + totalAsset);\\n\\n            int256 lnProportion = _logProportion(proportion);\\n\\n            rateAnchor = newExchangeRate - lnProportion.divDown(rateScalar);\\n        }\\n    }\\n\\n    /// @notice Calculates the current market implied rate.\\n    /// @return lnImpliedRate the implied rate\\n    function _getLnImpliedRate(\\n        int256 totalPt,\\n        int256 totalAsset,\\n        int256 rateScalar,\\n        int256 rateAnchor,\\n        uint256 timeToExpiry\\n    ) internal pure returns (uint256 lnImpliedRate) {\\n        // This will check for exchange rates < PMath.IONE\\n        int256 exchangeRate = _getExchangeRate(totalPt, totalAsset, rateScalar, rateAnchor, 0);\\n\\n        // exchangeRate >= 1 so its ln >= 0\\n        uint256 lnRate = exchangeRate.ln().Uint();\\n\\n        lnImpliedRate = (lnRate * IMPLIED_RATE_TIME) / timeToExpiry;\\n    }\\n\\n    /// @notice Converts an implied rate to an exchange rate given a time to expiry. The\\n    /// formula is E = e^rt\\n    function _getExchangeRateFromImpliedRate(\\n        uint256 lnImpliedRate,\\n        uint256 timeToExpiry\\n    ) internal pure returns (int256 exchangeRate) {\\n        uint256 rt = (lnImpliedRate * timeToExpiry) / IMPLIED_RATE_TIME;\\n\\n        exchangeRate = LogExpMath.exp(rt.Int());\\n    }\\n\\n    function _getExchangeRate(\\n        int256 totalPt,\\n        int256 totalAsset,\\n        int256 rateScalar,\\n        int256 rateAnchor,\\n        int256 netPtToAccount\\n    ) internal pure returns (int256 exchangeRate) {\\n        int256 numerator = totalPt.subNoNeg(netPtToAccount);\\n\\n        int256 proportion = (numerator.divDown(totalPt + totalAsset));\\n\\n        if (proportion > MAX_MARKET_PROPORTION)\\n            revert Errors.MarketProportionTooHigh(proportion, MAX_MARKET_PROPORTION);\\n\\n        int256 lnProportion = _logProportion(proportion);\\n\\n        exchangeRate = lnProportion.divDown(rateScalar) + rateAnchor;\\n\\n        if (exchangeRate < PMath.IONE) revert Errors.MarketExchangeRateBelowOne(exchangeRate);\\n    }\\n\\n    function _logProportion(int256 proportion) internal pure returns (int256 res) {\\n        if (proportion == PMath.IONE) revert Errors.MarketProportionMustNotEqualOne();\\n\\n        int256 logitP = proportion.divDown(PMath.IONE - proportion);\\n\\n        res = logitP.ln();\\n    }\\n\\n    function _getRateScalar(MarketState memory market, uint256 timeToExpiry) internal pure returns (int256 rateScalar) {\\n        rateScalar = (market.scalarRoot * IMPLIED_RATE_TIME.Int()) / timeToExpiry.Int();\\n        if (rateScalar <= 0) revert Errors.MarketRateScalarBelowZero(rateScalar);\\n    }\\n\\n    function setInitialLnImpliedRate(\\n        MarketState memory market,\\n        PYIndex index,\\n        int256 initialAnchor,\\n        uint256 blockTime\\n    ) internal pure {\\n        /// ------------------------------------------------------------\\n        /// CHECKS\\n        /// ------------------------------------------------------------\\n        if (MiniHelpers.isExpired(market.expiry, blockTime)) revert Errors.MarketExpired();\\n\\n        /// ------------------------------------------------------------\\n        /// MATH\\n        /// ------------------------------------------------------------\\n        int256 totalAsset = index.syToAsset(market.totalSy);\\n        uint256 timeToExpiry = market.expiry - blockTime;\\n        int256 rateScalar = _getRateScalar(market, timeToExpiry);\\n\\n        /// ------------------------------------------------------------\\n        /// WRITE\\n        /// ------------------------------------------------------------\\n        market.lastLnImpliedRate = _getLnImpliedRate(\\n            market.totalPt,\\n            totalAsset,\\n            rateScalar,\\n            initialAnchor,\\n            timeToExpiry\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xc9229208355d2e853ebb026231f79625b73df3a9576e71dfe96a9a92b4e101e5\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/StandardizedYield/PYIndex.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"../../interfaces/IPYieldToken.sol\\\";\\nimport \\\"../../interfaces/IPPrincipalToken.sol\\\";\\n\\nimport \\\"./SYUtils.sol\\\";\\nimport \\\"../libraries/math/PMath.sol\\\";\\n\\ntype PYIndex is uint256;\\n\\nlibrary PYIndexLib {\\n    using PMath for uint256;\\n    using PMath for int256;\\n\\n    function newIndex(IPYieldToken YT) internal returns (PYIndex) {\\n        return PYIndex.wrap(YT.pyIndexCurrent());\\n    }\\n\\n    function syToAsset(PYIndex index, uint256 syAmount) internal pure returns (uint256) {\\n        return SYUtils.syToAsset(PYIndex.unwrap(index), syAmount);\\n    }\\n\\n    function assetToSy(PYIndex index, uint256 assetAmount) internal pure returns (uint256) {\\n        return SYUtils.assetToSy(PYIndex.unwrap(index), assetAmount);\\n    }\\n\\n    function assetToSyUp(PYIndex index, uint256 assetAmount) internal pure returns (uint256) {\\n        return SYUtils.assetToSyUp(PYIndex.unwrap(index), assetAmount);\\n    }\\n\\n    function syToAssetUp(PYIndex index, uint256 syAmount) internal pure returns (uint256) {\\n        uint256 _index = PYIndex.unwrap(index);\\n        return SYUtils.syToAssetUp(_index, syAmount);\\n    }\\n\\n    function syToAsset(PYIndex index, int256 syAmount) internal pure returns (int256) {\\n        int256 sign = syAmount < 0 ? int256(-1) : int256(1);\\n        return sign * (SYUtils.syToAsset(PYIndex.unwrap(index), syAmount.abs())).Int();\\n    }\\n\\n    function assetToSy(PYIndex index, int256 assetAmount) internal pure returns (int256) {\\n        int256 sign = assetAmount < 0 ? int256(-1) : int256(1);\\n        return sign * (SYUtils.assetToSy(PYIndex.unwrap(index), assetAmount.abs())).Int();\\n    }\\n\\n    function assetToSyUp(PYIndex index, int256 assetAmount) internal pure returns (int256) {\\n        int256 sign = assetAmount < 0 ? int256(-1) : int256(1);\\n        return sign * (SYUtils.assetToSyUp(PYIndex.unwrap(index), assetAmount.abs())).Int();\\n    }\\n}\\n\",\"keccak256\":\"0x1d4bb00cc66f73f51eee668d9b0eb90981f5183f126b1226cd6f6260eafa1768\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/StandardizedYield/SYUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary SYUtils {\\n    uint256 internal constant ONE = 1e18;\\n\\n    function syToAsset(uint256 exchangeRate, uint256 syAmount) internal pure returns (uint256) {\\n        return (syAmount * exchangeRate) / ONE;\\n    }\\n\\n    function syToAssetUp(uint256 exchangeRate, uint256 syAmount) internal pure returns (uint256) {\\n        return (syAmount * exchangeRate + ONE - 1) / ONE;\\n    }\\n\\n    function assetToSy(uint256 exchangeRate, uint256 assetAmount) internal pure returns (uint256) {\\n        return (assetAmount * ONE) / exchangeRate;\\n    }\\n\\n    function assetToSyUp(uint256 exchangeRate, uint256 assetAmount) internal pure returns (uint256) {\\n        return (assetAmount * ONE + exchangeRate - 1) / exchangeRate;\\n    }\\n}\\n\",\"keccak256\":\"0xd3bc20ce8f41cd07513beb669eda02f0c5e9cafb74406cd4c89019525399d4dd\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary Errors {\\n    // BulkSeller\\n    error BulkInsufficientSyForTrade(uint256 currentAmount, uint256 requiredAmount);\\n    error BulkInsufficientTokenForTrade(uint256 currentAmount, uint256 requiredAmount);\\n    error BulkInSufficientSyOut(uint256 actualSyOut, uint256 requiredSyOut);\\n    error BulkInSufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\\n    error BulkInsufficientSyReceived(uint256 actualBalance, uint256 requiredBalance);\\n    error BulkNotMaintainer();\\n    error BulkNotAdmin();\\n    error BulkSellerAlreadyExisted(address token, address SY, address bulk);\\n    error BulkSellerInvalidToken(address token, address SY);\\n    error BulkBadRateTokenToSy(uint256 actualRate, uint256 currentRate, uint256 eps);\\n    error BulkBadRateSyToToken(uint256 actualRate, uint256 currentRate, uint256 eps);\\n\\n    // APPROX\\n    error ApproxFail();\\n    error ApproxParamsInvalid(uint256 guessMin, uint256 guessMax, uint256 eps);\\n    error ApproxBinarySearchInputInvalid(\\n        uint256 approxGuessMin,\\n        uint256 approxGuessMax,\\n        uint256 minGuessMin,\\n        uint256 maxGuessMax\\n    );\\n\\n    // MARKET + MARKET MATH CORE\\n    error MarketExpired();\\n    error MarketZeroAmountsInput();\\n    error MarketZeroAmountsOutput();\\n    error MarketZeroLnImpliedRate();\\n    error MarketInsufficientPtForTrade(int256 currentAmount, int256 requiredAmount);\\n    error MarketInsufficientPtReceived(uint256 actualBalance, uint256 requiredBalance);\\n    error MarketInsufficientSyReceived(uint256 actualBalance, uint256 requiredBalance);\\n    error MarketZeroTotalPtOrTotalAsset(int256 totalPt, int256 totalAsset);\\n    error MarketExchangeRateBelowOne(int256 exchangeRate);\\n    error MarketProportionMustNotEqualOne();\\n    error MarketRateScalarBelowZero(int256 rateScalar);\\n    error MarketScalarRootBelowZero(int256 scalarRoot);\\n    error MarketProportionTooHigh(int256 proportion, int256 maxProportion);\\n\\n    error OracleUninitialized();\\n    error OracleTargetTooOld(uint32 target, uint32 oldest);\\n    error OracleZeroCardinality();\\n\\n    error MarketFactoryExpiredPt();\\n    error MarketFactoryInvalidPt();\\n    error MarketFactoryMarketExists();\\n\\n    error MarketFactoryLnFeeRateRootTooHigh(uint80 lnFeeRateRoot, uint256 maxLnFeeRateRoot);\\n    error MarketFactoryOverriddenFeeTooHigh(uint80 overriddenFee, uint256 marketLnFeeRateRoot);\\n    error MarketFactoryReserveFeePercentTooHigh(uint8 reserveFeePercent, uint8 maxReserveFeePercent);\\n    error MarketFactoryZeroTreasury();\\n    error MarketFactoryInitialAnchorTooLow(int256 initialAnchor, int256 minInitialAnchor);\\n    error MFNotPendleMarket(address addr);\\n\\n    // ROUTER\\n    error RouterInsufficientLpOut(uint256 actualLpOut, uint256 requiredLpOut);\\n    error RouterInsufficientSyOut(uint256 actualSyOut, uint256 requiredSyOut);\\n    error RouterInsufficientPtOut(uint256 actualPtOut, uint256 requiredPtOut);\\n    error RouterInsufficientYtOut(uint256 actualYtOut, uint256 requiredYtOut);\\n    error RouterInsufficientPYOut(uint256 actualPYOut, uint256 requiredPYOut);\\n    error RouterInsufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\\n    error RouterInsufficientSyRepay(uint256 actualSyRepay, uint256 requiredSyRepay);\\n    error RouterInsufficientPtRepay(uint256 actualPtRepay, uint256 requiredPtRepay);\\n    error RouterNotAllSyUsed(uint256 netSyDesired, uint256 netSyUsed);\\n\\n    error RouterTimeRangeZero();\\n    error RouterCallbackNotPendleMarket(address caller);\\n    error RouterInvalidAction(bytes4 selector);\\n    error RouterInvalidFacet(address facet);\\n\\n    error RouterKyberSwapDataZero();\\n\\n    error SimulationResults(bool success, bytes res);\\n\\n    // YIELD CONTRACT\\n    error YCExpired();\\n    error YCNotExpired();\\n    error YieldContractInsufficientSy(uint256 actualSy, uint256 requiredSy);\\n    error YCNothingToRedeem();\\n    error YCPostExpiryDataNotSet();\\n    error YCNoFloatingSy();\\n\\n    // YieldFactory\\n    error YCFactoryInvalidExpiry();\\n    error YCFactoryYieldContractExisted();\\n    error YCFactoryZeroExpiryDivisor();\\n    error YCFactoryZeroTreasury();\\n    error YCFactoryInterestFeeRateTooHigh(uint256 interestFeeRate, uint256 maxInterestFeeRate);\\n    error YCFactoryRewardFeeRateTooHigh(uint256 newRewardFeeRate, uint256 maxRewardFeeRate);\\n\\n    // SY\\n    error SYInvalidTokenIn(address token);\\n    error SYInvalidTokenOut(address token);\\n    error SYZeroDeposit();\\n    error SYZeroRedeem();\\n    error SYInsufficientSharesOut(uint256 actualSharesOut, uint256 requiredSharesOut);\\n    error SYInsufficientTokenOut(uint256 actualTokenOut, uint256 requiredTokenOut);\\n\\n    // SY-specific\\n    error SYQiTokenMintFailed(uint256 errCode);\\n    error SYQiTokenRedeemFailed(uint256 errCode);\\n    error SYQiTokenRedeemRewardsFailed(uint256 rewardAccruedType0, uint256 rewardAccruedType1);\\n    error SYQiTokenBorrowRateTooHigh(uint256 borrowRate, uint256 borrowRateMax);\\n\\n    error SYCurveInvalidPid();\\n    error SYCurve3crvPoolNotFound();\\n\\n    error SYApeDepositAmountTooSmall(uint256 amountDeposited);\\n    error SYBalancerInvalidPid();\\n    error SYInvalidRewardToken(address token);\\n\\n    error SYStargateRedeemCapExceeded(uint256 amountLpDesired, uint256 amountLpRedeemable);\\n\\n    error SYBalancerReentrancy();\\n\\n    error NotFromTrustedRemote(uint16 srcChainId, bytes path);\\n\\n    error ApxETHNotEnoughBuffer();\\n\\n    // Liquidity Mining\\n    error VCInactivePool(address pool);\\n    error VCPoolAlreadyActive(address pool);\\n    error VCZeroVePendle(address user);\\n    error VCExceededMaxWeight(uint256 totalWeight, uint256 maxWeight);\\n    error VCEpochNotFinalized(uint256 wTime);\\n    error VCPoolAlreadyAddAndRemoved(address pool);\\n\\n    error VEInvalidNewExpiry(uint256 newExpiry);\\n    error VEExceededMaxLockTime();\\n    error VEInsufficientLockTime();\\n    error VENotAllowedReduceExpiry();\\n    error VEZeroAmountLocked();\\n    error VEPositionNotExpired();\\n    error VEZeroPosition();\\n    error VEZeroSlope(uint128 bias, uint128 slope);\\n    error VEReceiveOldSupply(uint256 msgTime);\\n\\n    error GCNotPendleMarket(address caller);\\n    error GCNotVotingController(address caller);\\n\\n    error InvalidWTime(uint256 wTime);\\n    error ExpiryInThePast(uint256 expiry);\\n    error ChainNotSupported(uint256 chainId);\\n\\n    error FDTotalAmountFundedNotMatch(uint256 actualTotalAmount, uint256 expectedTotalAmount);\\n    error FDEpochLengthMismatch();\\n    error FDInvalidPool(address pool);\\n    error FDPoolAlreadyExists(address pool);\\n    error FDInvalidNewFinishedEpoch(uint256 oldFinishedEpoch, uint256 newFinishedEpoch);\\n    error FDInvalidStartEpoch(uint256 startEpoch);\\n    error FDInvalidWTimeFund(uint256 lastFunded, uint256 wTime);\\n    error FDFutureFunding(uint256 lastFunded, uint256 currentWTime);\\n\\n    error BDInvalidEpoch(uint256 epoch, uint256 startTime);\\n\\n    // Cross-Chain\\n    error MsgNotFromSendEndpoint(uint16 srcChainId, bytes path);\\n    error MsgNotFromReceiveEndpoint(address sender);\\n    error InsufficientFeeToSendMsg(uint256 currentFee, uint256 requiredFee);\\n    error ApproxDstExecutionGasNotSet();\\n    error InvalidRetryData();\\n\\n    // GENERIC MSG\\n    error ArrayLengthMismatch();\\n    error ArrayEmpty();\\n    error ArrayOutOfBounds();\\n    error ZeroAddress();\\n    error FailedToSendEther();\\n    error InvalidMerkleProof();\\n\\n    error OnlyLayerZeroEndpoint();\\n    error OnlyYT();\\n    error OnlyYCFactory();\\n    error OnlyWhitelisted();\\n\\n    // Swap Aggregator\\n    error SAInsufficientTokenIn(address tokenIn, uint256 amountExpected, uint256 amountActual);\\n    error UnsupportedSelector(uint256 aggregatorType, bytes4 selector);\\n}\\n\",\"keccak256\":\"0xbebc9cfdfaa88bbf1e53d31c5f5c89265dac4c7ba31920d98b7b7bbd74c4345d\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/MiniHelpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nlibrary MiniHelpers {\\n    function isCurrentlyExpired(uint256 expiry) internal view returns (bool) {\\n        return (expiry <= block.timestamp);\\n    }\\n\\n    function isExpired(uint256 expiry, uint256 blockTime) internal pure returns (bool) {\\n        return (expiry <= blockTime);\\n    }\\n\\n    function isTimeInThePast(uint256 timestamp) internal view returns (bool) {\\n        return (timestamp <= block.timestamp); // same definition as isCurrentlyExpired\\n    }\\n}\\n\",\"keccak256\":\"0xfcd8768e3e9970df6d6375ff3f43caca7fa3a02cc43afd8f3e56bbde463a3bf5\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/math/LogExpMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\\n// documentation files (the \\u201cSoftware\\u201d), to deal in the Software without restriction, including without limitation the\\n// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to\\n// permit persons to whom the Software is furnished to do so, subject to the following conditions:\\n\\n// The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\\n// Software.\\n\\n// THE SOFTWARE IS PROVIDED \\u201cAS IS\\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\\n// WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\\n\\npragma solidity ^0.8.0;\\n\\n/* solhint-disable */\\n\\n/**\\n * @dev Exponentiation and logarithm functions for 18 decimal fixed point numbers (both base and exponent/argument).\\n *\\n * Exponentiation and logarithm with arbitrary bases (x^y and log_x(y)) are implemented by conversion to natural\\n * exponentiation and logarithm (where the base is Euler's number).\\n *\\n * @author Fernando Martinelli - @fernandomartinelli\\n * @author Sergio Yuhjtman - @sergioyuhjtman\\n * @author Daniel Fernandez - @dmf7z\\n */\\nlibrary LogExpMath {\\n    // All fixed point multiplications and divisions are inlined. This means we need to divide by ONE when multiplying\\n    // two numbers, and multiply by ONE when dividing them.\\n\\n    // All arguments and return values are 18 decimal fixed point numbers.\\n    int256 constant ONE_18 = 1e18;\\n\\n    // Internally, intermediate values are computed with higher precision as 20 decimal fixed point numbers, and in the\\n    // case of ln36, 36 decimals.\\n    int256 constant ONE_20 = 1e20;\\n    int256 constant ONE_36 = 1e36;\\n\\n    // The domain of natural exponentiation is bound by the word size and number of decimals used.\\n    //\\n    // Because internally the result will be stored using 20 decimals, the largest possible result is\\n    // (2^255 - 1) / 10^20, which makes the largest exponent ln((2^255 - 1) / 10^20) = 130.700829182905140221.\\n    // The smallest possible result is 10^(-18), which makes largest negative argument\\n    // ln(10^(-18)) = -41.446531673892822312.\\n    // We use 130.0 and -41.0 to have some safety margin.\\n    int256 constant MAX_NATURAL_EXPONENT = 130e18;\\n    int256 constant MIN_NATURAL_EXPONENT = -41e18;\\n\\n    // Bounds for ln_36's argument. Both ln(0.9) and ln(1.1) can be represented with 36 decimal places in a fixed point\\n    // 256 bit integer.\\n    int256 constant LN_36_LOWER_BOUND = ONE_18 - 1e17;\\n    int256 constant LN_36_UPPER_BOUND = ONE_18 + 1e17;\\n\\n    uint256 constant MILD_EXPONENT_BOUND = 2 ** 254 / uint256(ONE_20);\\n\\n    // 18 decimal constants\\n    int256 constant x0 = 128000000000000000000; // 2\\u02c67\\n    int256 constant a0 = 38877084059945950922200000000000000000000000000000000000; // e\\u02c6(x0) (no decimals)\\n    int256 constant x1 = 64000000000000000000; // 2\\u02c66\\n    int256 constant a1 = 6235149080811616882910000000; // e\\u02c6(x1) (no decimals)\\n\\n    // 20 decimal constants\\n    int256 constant x2 = 3200000000000000000000; // 2\\u02c65\\n    int256 constant a2 = 7896296018268069516100000000000000; // e\\u02c6(x2)\\n    int256 constant x3 = 1600000000000000000000; // 2\\u02c64\\n    int256 constant a3 = 888611052050787263676000000; // e\\u02c6(x3)\\n    int256 constant x4 = 800000000000000000000; // 2\\u02c63\\n    int256 constant a4 = 298095798704172827474000; // e\\u02c6(x4)\\n    int256 constant x5 = 400000000000000000000; // 2\\u02c62\\n    int256 constant a5 = 5459815003314423907810; // e\\u02c6(x5)\\n    int256 constant x6 = 200000000000000000000; // 2\\u02c61\\n    int256 constant a6 = 738905609893065022723; // e\\u02c6(x6)\\n    int256 constant x7 = 100000000000000000000; // 2\\u02c60\\n    int256 constant a7 = 271828182845904523536; // e\\u02c6(x7)\\n    int256 constant x8 = 50000000000000000000; // 2\\u02c6-1\\n    int256 constant a8 = 164872127070012814685; // e\\u02c6(x8)\\n    int256 constant x9 = 25000000000000000000; // 2\\u02c6-2\\n    int256 constant a9 = 128402541668774148407; // e\\u02c6(x9)\\n    int256 constant x10 = 12500000000000000000; // 2\\u02c6-3\\n    int256 constant a10 = 113314845306682631683; // e\\u02c6(x10)\\n    int256 constant x11 = 6250000000000000000; // 2\\u02c6-4\\n    int256 constant a11 = 106449445891785942956; // e\\u02c6(x11)\\n\\n    /**\\n     * @dev Natural exponentiation (e^x) with signed 18 decimal fixed point exponent.\\n     *\\n     * Reverts if `x` is smaller than MIN_NATURAL_EXPONENT, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function exp(int256 x) internal pure returns (int256) {\\n        unchecked {\\n            require(x >= MIN_NATURAL_EXPONENT && x <= MAX_NATURAL_EXPONENT, \\\"Invalid exponent\\\");\\n\\n            if (x < 0) {\\n                // We only handle positive exponents: e^(-x) is computed as 1 / e^x. We can safely make x positive since it\\n                // fits in the signed 256 bit range (as it is larger than MIN_NATURAL_EXPONENT).\\n                // Fixed point division requires multiplying by ONE_18.\\n                return ((ONE_18 * ONE_18) / exp(-x));\\n            }\\n\\n            // First, we use the fact that e^(x+y) = e^x * e^y to decompose x into a sum of powers of two, which we call x_n,\\n            // where x_n == 2^(7 - n), and e^x_n = a_n has been precomputed. We choose the first x_n, x0, to equal 2^7\\n            // because all larger powers are larger than MAX_NATURAL_EXPONENT, and therefore not present in the\\n            // decomposition.\\n            // At the end of this process we will have the product of all e^x_n = a_n that apply, and the remainder of this\\n            // decomposition, which will be lower than the smallest x_n.\\n            // exp(x) = k_0 * a_0 * k_1 * a_1 * ... + k_n * a_n * exp(remainder), where each k_n equals either 0 or 1.\\n            // We mutate x by subtracting x_n, making it the remainder of the decomposition.\\n\\n            // The first two a_n (e^(2^7) and e^(2^6)) are too large if stored as 18 decimal numbers, and could cause\\n            // intermediate overflows. Instead we store them as plain integers, with 0 decimals.\\n            // Additionally, x0 + x1 is larger than MAX_NATURAL_EXPONENT, which means they will not both be present in the\\n            // decomposition.\\n\\n            // For each x_n, we test if that term is present in the decomposition (if x is larger than it), and if so deduct\\n            // it and compute the accumulated product.\\n\\n            int256 firstAN;\\n            if (x >= x0) {\\n                x -= x0;\\n                firstAN = a0;\\n            } else if (x >= x1) {\\n                x -= x1;\\n                firstAN = a1;\\n            } else {\\n                firstAN = 1; // One with no decimal places\\n            }\\n\\n            // We now transform x into a 20 decimal fixed point number, to have enhanced precision when computing the\\n            // smaller terms.\\n            x *= 100;\\n\\n            // `product` is the accumulated product of all a_n (except a0 and a1), which starts at 20 decimal fixed point\\n            // one. Recall that fixed point multiplication requires dividing by ONE_20.\\n            int256 product = ONE_20;\\n\\n            if (x >= x2) {\\n                x -= x2;\\n                product = (product * a2) / ONE_20;\\n            }\\n            if (x >= x3) {\\n                x -= x3;\\n                product = (product * a3) / ONE_20;\\n            }\\n            if (x >= x4) {\\n                x -= x4;\\n                product = (product * a4) / ONE_20;\\n            }\\n            if (x >= x5) {\\n                x -= x5;\\n                product = (product * a5) / ONE_20;\\n            }\\n            if (x >= x6) {\\n                x -= x6;\\n                product = (product * a6) / ONE_20;\\n            }\\n            if (x >= x7) {\\n                x -= x7;\\n                product = (product * a7) / ONE_20;\\n            }\\n            if (x >= x8) {\\n                x -= x8;\\n                product = (product * a8) / ONE_20;\\n            }\\n            if (x >= x9) {\\n                x -= x9;\\n                product = (product * a9) / ONE_20;\\n            }\\n\\n            // x10 and x11 are unnecessary here since we have high enough precision already.\\n\\n            // Now we need to compute e^x, where x is small (in particular, it is smaller than x9). We use the Taylor series\\n            // expansion for e^x: 1 + x + (x^2 / 2!) + (x^3 / 3!) + ... + (x^n / n!).\\n\\n            int256 seriesSum = ONE_20; // The initial one in the sum, with 20 decimal places.\\n            int256 term; // Each term in the sum, where the nth term is (x^n / n!).\\n\\n            // The first term is simply x.\\n            term = x;\\n            seriesSum += term;\\n\\n            // Each term (x^n / n!) equals the previous one times x, divided by n. Since x is a fixed point number,\\n            // multiplying by it requires dividing by ONE_20, but dividing by the non-fixed point n values does not.\\n\\n            term = ((term * x) / ONE_20) / 2;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 3;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 4;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 5;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 6;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 7;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 8;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 9;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 10;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 11;\\n            seriesSum += term;\\n\\n            term = ((term * x) / ONE_20) / 12;\\n            seriesSum += term;\\n\\n            // 12 Taylor terms are sufficient for 18 decimal precision.\\n\\n            // We now have the first a_n (with no decimals), and the product of all other a_n present, and the Taylor\\n            // approximation of the exponentiation of the remainder (both with 20 decimals). All that remains is to multiply\\n            // all three (one 20 decimal fixed point multiplication, dividing by ONE_20, and one integer multiplication),\\n            // and then drop two digits to return an 18 decimal value.\\n\\n            return (((product * seriesSum) / ONE_20) * firstAN) / 100;\\n        }\\n    }\\n\\n    /**\\n     * @dev Natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function ln(int256 a) internal pure returns (int256) {\\n        unchecked {\\n            // The real natural logarithm is not defined for negative numbers or zero.\\n            require(a > 0, \\\"out of bounds\\\");\\n            if (LN_36_LOWER_BOUND < a && a < LN_36_UPPER_BOUND) {\\n                return _ln_36(a) / ONE_18;\\n            } else {\\n                return _ln(a);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Exponentiation (x^y) with unsigned 18 decimal fixed point base and exponent.\\n     *\\n     * Reverts if ln(x) * y is smaller than `MIN_NATURAL_EXPONENT`, or larger than `MAX_NATURAL_EXPONENT`.\\n     */\\n    function pow(uint256 x, uint256 y) internal pure returns (uint256) {\\n        unchecked {\\n            if (y == 0) {\\n                // We solve the 0^0 indetermination by making it equal one.\\n                return uint256(ONE_18);\\n            }\\n\\n            if (x == 0) {\\n                return 0;\\n            }\\n\\n            // Instead of computing x^y directly, we instead rely on the properties of logarithms and exponentiation to\\n            // arrive at that r`esult. In particular, exp(ln(x)) = x, and ln(x^y) = y * ln(x). This means\\n            // x^y = exp(y * ln(x)).\\n\\n            // The ln function takes a signed value, so we need to make sure x fits in the signed 256 bit range.\\n            require(x < 2 ** 255, \\\"x out of bounds\\\");\\n            int256 x_int256 = int256(x);\\n\\n            // We will compute y * ln(x) in a single step. Depending on the value of x, we can either use ln or ln_36. In\\n            // both cases, we leave the division by ONE_18 (due to fixed point multiplication) to the end.\\n\\n            // This prevents y * ln(x) from overflowing, and at the same time guarantees y fits in the signed 256 bit range.\\n            require(y < MILD_EXPONENT_BOUND, \\\"y out of bounds\\\");\\n            int256 y_int256 = int256(y);\\n\\n            int256 logx_times_y;\\n            if (LN_36_LOWER_BOUND < x_int256 && x_int256 < LN_36_UPPER_BOUND) {\\n                int256 ln_36_x = _ln_36(x_int256);\\n\\n                // ln_36_x has 36 decimal places, so multiplying by y_int256 isn't as straightforward, since we can't just\\n                // bring y_int256 to 36 decimal places, as it might overflow. Instead, we perform two 18 decimal\\n                // multiplications and add the results: one with the first 18 decimals of ln_36_x, and one with the\\n                // (downscaled) last 18 decimals.\\n                logx_times_y = ((ln_36_x / ONE_18) * y_int256 + ((ln_36_x % ONE_18) * y_int256) / ONE_18);\\n            } else {\\n                logx_times_y = _ln(x_int256) * y_int256;\\n            }\\n            logx_times_y /= ONE_18;\\n\\n            // Finally, we compute exp(y * ln(x)) to arrive at x^y\\n            require(\\n                MIN_NATURAL_EXPONENT <= logx_times_y && logx_times_y <= MAX_NATURAL_EXPONENT,\\n                \\\"product out of bounds\\\"\\n            );\\n\\n            return uint256(exp(logx_times_y));\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal natural logarithm (ln(a)) with signed 18 decimal fixed point argument.\\n     */\\n    function _ln(int256 a) private pure returns (int256) {\\n        unchecked {\\n            if (a < ONE_18) {\\n                // Since ln(a^k) = k * ln(a), we can compute ln(a) as ln(a) = ln((1/a)^(-1)) = - ln((1/a)). If a is less\\n                // than one, 1/a will be greater than one, and this if statement will not be entered in the recursive call.\\n                // Fixed point division requires multiplying by ONE_18.\\n                return (-_ln((ONE_18 * ONE_18) / a));\\n            }\\n\\n            // First, we use the fact that ln^(a * b) = ln(a) + ln(b) to decompose ln(a) into a sum of powers of two, which\\n            // we call x_n, where x_n == 2^(7 - n), which are the natural logarithm of precomputed quantities a_n (that is,\\n            // ln(a_n) = x_n). We choose the first x_n, x0, to equal 2^7 because the exponential of all larger powers cannot\\n            // be represented as 18 fixed point decimal numbers in 256 bits, and are therefore larger than a.\\n            // At the end of this process we will have the sum of all x_n = ln(a_n) that apply, and the remainder of this\\n            // decomposition, which will be lower than the smallest a_n.\\n            // ln(a) = k_0 * x_0 + k_1 * x_1 + ... + k_n * x_n + ln(remainder), where each k_n equals either 0 or 1.\\n            // We mutate a by subtracting a_n, making it the remainder of the decomposition.\\n\\n            // For reasons related to how `exp` works, the first two a_n (e^(2^7) and e^(2^6)) are not stored as fixed point\\n            // numbers with 18 decimals, but instead as plain integers with 0 decimals, so we need to multiply them by\\n            // ONE_18 to convert them to fixed point.\\n            // For each a_n, we test if that term is present in the decomposition (if a is larger than it), and if so divide\\n            // by it and compute the accumulated sum.\\n\\n            int256 sum = 0;\\n            if (a >= a0 * ONE_18) {\\n                a /= a0; // Integer, not fixed point division\\n                sum += x0;\\n            }\\n\\n            if (a >= a1 * ONE_18) {\\n                a /= a1; // Integer, not fixed point division\\n                sum += x1;\\n            }\\n\\n            // All other a_n and x_n are stored as 20 digit fixed point numbers, so we convert the sum and a to this format.\\n            sum *= 100;\\n            a *= 100;\\n\\n            // Because further a_n are  20 digit fixed point numbers, we multiply by ONE_20 when dividing by them.\\n\\n            if (a >= a2) {\\n                a = (a * ONE_20) / a2;\\n                sum += x2;\\n            }\\n\\n            if (a >= a3) {\\n                a = (a * ONE_20) / a3;\\n                sum += x3;\\n            }\\n\\n            if (a >= a4) {\\n                a = (a * ONE_20) / a4;\\n                sum += x4;\\n            }\\n\\n            if (a >= a5) {\\n                a = (a * ONE_20) / a5;\\n                sum += x5;\\n            }\\n\\n            if (a >= a6) {\\n                a = (a * ONE_20) / a6;\\n                sum += x6;\\n            }\\n\\n            if (a >= a7) {\\n                a = (a * ONE_20) / a7;\\n                sum += x7;\\n            }\\n\\n            if (a >= a8) {\\n                a = (a * ONE_20) / a8;\\n                sum += x8;\\n            }\\n\\n            if (a >= a9) {\\n                a = (a * ONE_20) / a9;\\n                sum += x9;\\n            }\\n\\n            if (a >= a10) {\\n                a = (a * ONE_20) / a10;\\n                sum += x10;\\n            }\\n\\n            if (a >= a11) {\\n                a = (a * ONE_20) / a11;\\n                sum += x11;\\n            }\\n\\n            // a is now a small number (smaller than a_11, which roughly equals 1.06). This means we can use a Taylor series\\n            // that converges rapidly for values of `a` close to one - the same one used in ln_36.\\n            // Let z = (a - 1) / (a + 1).\\n            // ln(a) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n            // Recall that 20 digit fixed point division requires multiplying by ONE_20, and multiplication requires\\n            // division by ONE_20.\\n            int256 z = ((a - ONE_20) * ONE_20) / (a + ONE_20);\\n            int256 z_squared = (z * z) / ONE_20;\\n\\n            // num is the numerator of the series: the z^(2 * n + 1) term\\n            int256 num = z;\\n\\n            // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n            int256 seriesSum = num;\\n\\n            // In each step, the numerator is multiplied by z^2\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 3;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 5;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 7;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 9;\\n\\n            num = (num * z_squared) / ONE_20;\\n            seriesSum += num / 11;\\n\\n            // 6 Taylor terms are sufficient for 36 decimal precision.\\n\\n            // Finally, we multiply by 2 (non fixed point) to compute ln(remainder)\\n            seriesSum *= 2;\\n\\n            // We now have the sum of all x_n present, and the Taylor approximation of the logarithm of the remainder (both\\n            // with 20 decimals). All that remains is to sum these two, and then drop two digits to return a 18 decimal\\n            // value.\\n\\n            return (sum + seriesSum) / 100;\\n        }\\n    }\\n\\n    /**\\n     * @dev Intrnal high precision (36 decimal places) natural logarithm (ln(x)) with signed 18 decimal fixed point argument,\\n     * for x close to one.\\n     *\\n     * Should only be used if x is between LN_36_LOWER_BOUND and LN_36_UPPER_BOUND.\\n     */\\n    function _ln_36(int256 x) private pure returns (int256) {\\n        unchecked {\\n            // Since ln(1) = 0, a value of x close to one will yield a very small result, which makes using 36 digits\\n            // worthwhile.\\n\\n            // First, we transform x to a 36 digit fixed point value.\\n            x *= ONE_18;\\n\\n            // We will use the following Taylor expansion, which converges very rapidly. Let z = (x - 1) / (x + 1).\\n            // ln(x) = 2 * (z + z^3 / 3 + z^5 / 5 + z^7 / 7 + ... + z^(2 * n + 1) / (2 * n + 1))\\n\\n            // Recall that 36 digit fixed point division requires multiplying by ONE_36, and multiplication requires\\n            // division by ONE_36.\\n            int256 z = ((x - ONE_36) * ONE_36) / (x + ONE_36);\\n            int256 z_squared = (z * z) / ONE_36;\\n\\n            // num is the numerator of the series: the z^(2 * n + 1) term\\n            int256 num = z;\\n\\n            // seriesSum holds the accumulated sum of each term in the series, starting with the initial z\\n            int256 seriesSum = num;\\n\\n            // In each step, the numerator is multiplied by z^2\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 3;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 5;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 7;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 9;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 11;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 13;\\n\\n            num = (num * z_squared) / ONE_36;\\n            seriesSum += num / 15;\\n\\n            // 8 Taylor terms are sufficient for 36 decimal precision.\\n\\n            // All that remains is multiplying by 2 (non fixed point).\\n            return seriesSum * 2;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x844f812a1d2528fbe65c1fbaf1c2fe022658b3ecc29385217b6517715d801b94\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/core/libraries/math/PMath.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n// This program is free software: you can redistribute it and/or modify\\n// it under the terms of the GNU General Public License as published by\\n// the Free Software Foundation, either version 3 of the License, or\\n// (at your option) any later version.\\n\\n// This program is distributed in the hope that it will be useful,\\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n// GNU General Public License for more details.\\n\\n// You should have received a copy of the GNU General Public License\\n// along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n\\npragma solidity ^0.8.0;\\n\\n/* solhint-disable private-vars-leading-underscore, reason-string */\\n\\nlibrary PMath {\\n    uint256 internal constant ONE = 1e18; // 18 decimal places\\n    int256 internal constant IONE = 1e18; // 18 decimal places\\n\\n    function subMax0(uint256 a, uint256 b) internal pure returns (uint256) {\\n        unchecked {\\n            return (a >= b ? a - b : 0);\\n        }\\n    }\\n\\n    function subNoNeg(int256 a, int256 b) internal pure returns (int256) {\\n        require(a >= b, \\\"negative\\\");\\n        return a - b; // no unchecked since if b is very negative, a - b might overflow\\n    }\\n\\n    function mulDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 product = a * b;\\n        unchecked {\\n            return product / ONE;\\n        }\\n    }\\n\\n    function mulDown(int256 a, int256 b) internal pure returns (int256) {\\n        int256 product = a * b;\\n        unchecked {\\n            return product / IONE;\\n        }\\n    }\\n\\n    function divDown(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 aInflated = a * ONE;\\n        unchecked {\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function divDown(int256 a, int256 b) internal pure returns (int256) {\\n        int256 aInflated = a * IONE;\\n        unchecked {\\n            return aInflated / b;\\n        }\\n    }\\n\\n    function rawDivUp(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    function rawDivUp(int256 a, int256 b) internal pure returns (int256) {\\n        return (a + b - 1) / b;\\n    }\\n\\n    function slipUp(uint256 a, uint256 factor) internal pure returns (uint256) {\\n        return mulDown(a, ONE + factor);\\n    }\\n\\n    function slipDown(uint256 a, uint256 factor) internal pure returns (uint256) {\\n        return mulDown(a, ONE - factor);\\n    }\\n\\n    // @author Uniswap\\n    function sqrt(uint256 y) internal pure returns (uint256 z) {\\n        if (y > 3) {\\n            z = y;\\n            uint256 x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n\\n    function square(uint256 x) internal pure returns (uint256) {\\n        return x * x;\\n    }\\n\\n    function squareDown(uint256 x) internal pure returns (uint256) {\\n        return mulDown(x, x);\\n    }\\n\\n    function abs(int256 x) internal pure returns (uint256) {\\n        return uint256(x > 0 ? x : -x);\\n    }\\n\\n    function neg(int256 x) internal pure returns (int256) {\\n        return x * (-1);\\n    }\\n\\n    function neg(uint256 x) internal pure returns (int256) {\\n        return Int(x) * (-1);\\n    }\\n\\n    function max(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x > y ? x : y);\\n    }\\n\\n    function max(int256 x, int256 y) internal pure returns (int256) {\\n        return (x > y ? x : y);\\n    }\\n\\n    function min(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return (x < y ? x : y);\\n    }\\n\\n    function min(int256 x, int256 y) internal pure returns (int256) {\\n        return (x < y ? x : y);\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               SIGNED CASTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function Int(uint256 x) internal pure returns (int256) {\\n        require(x <= uint256(type(int256).max));\\n        return int256(x);\\n    }\\n\\n    function Int128(int256 x) internal pure returns (int128) {\\n        require(type(int128).min <= x && x <= type(int128).max);\\n        return int128(x);\\n    }\\n\\n    function Int128(uint256 x) internal pure returns (int128) {\\n        return Int128(Int(x));\\n    }\\n\\n    /*///////////////////////////////////////////////////////////////\\n                               UNSIGNED CASTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function Uint(int256 x) internal pure returns (uint256) {\\n        require(x >= 0);\\n        return uint256(x);\\n    }\\n\\n    function Uint32(uint256 x) internal pure returns (uint32) {\\n        require(x <= type(uint32).max);\\n        return uint32(x);\\n    }\\n\\n    function Uint64(uint256 x) internal pure returns (uint64) {\\n        require(x <= type(uint64).max);\\n        return uint64(x);\\n    }\\n\\n    function Uint112(uint256 x) internal pure returns (uint112) {\\n        require(x <= type(uint112).max);\\n        return uint112(x);\\n    }\\n\\n    function Uint96(uint256 x) internal pure returns (uint96) {\\n        require(x <= type(uint96).max);\\n        return uint96(x);\\n    }\\n\\n    function Uint128(uint256 x) internal pure returns (uint128) {\\n        require(x <= type(uint128).max);\\n        return uint128(x);\\n    }\\n\\n    function Uint192(uint256 x) internal pure returns (uint192) {\\n        require(x <= type(uint192).max);\\n        return uint192(x);\\n    }\\n\\n    function isAApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return mulDown(b, ONE - eps) <= a && a <= mulDown(b, ONE + eps);\\n    }\\n\\n    function isAGreaterApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return a >= b && a <= mulDown(b, ONE + eps);\\n    }\\n\\n    function isASmallerApproxB(uint256 a, uint256 b, uint256 eps) internal pure returns (bool) {\\n        return a <= b && a >= mulDown(b, ONE - eps);\\n    }\\n}\\n\",\"keccak256\":\"0x3f7f27cb9c0d10588529d8096a3ec3bb83f123715e93976e6ca91d36b865de0b\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPGauge.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IPGauge {\\n    function totalActiveSupply() external view returns (uint256);\\n\\n    function activeBalance(address user) external view returns (uint256);\\n\\n    // only available for newer factories. please check the verified contracts\\n    event RedeemRewards(address indexed user, uint256[] rewardsOut);\\n}\\n\",\"keccak256\":\"0x4ccb46450af0aa70f556b3e9e15c06a50ddbc9fe3543a013577839f2e43322c4\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPInterestManagerYT.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IPInterestManagerYT {\\n    event CollectInterestFee(uint256 amountInterestFee);\\n\\n    function userInterest(address user) external view returns (uint128 lastPYIndex, uint128 accruedInterest);\\n}\\n\",\"keccak256\":\"0x56228298c383a030df33bcf4430ec63ea9ed7e96c5bbf2f8195f179bc958841a\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPMarket.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IPPrincipalToken.sol\\\";\\nimport \\\"./IPYieldToken.sol\\\";\\nimport \\\"./IStandardizedYield.sol\\\";\\nimport \\\"./IPGauge.sol\\\";\\nimport \\\"../core/Market/MarketMathCore.sol\\\";\\n\\ninterface IPMarket is IERC20Metadata, IPGauge {\\n    event Mint(address indexed receiver, uint256 netLpMinted, uint256 netSyUsed, uint256 netPtUsed);\\n\\n    event Burn(\\n        address indexed receiverSy,\\n        address indexed receiverPt,\\n        uint256 netLpBurned,\\n        uint256 netSyOut,\\n        uint256 netPtOut\\n    );\\n\\n    event Swap(\\n        address indexed caller,\\n        address indexed receiver,\\n        int256 netPtOut,\\n        int256 netSyOut,\\n        uint256 netSyFee,\\n        uint256 netSyToReserve\\n    );\\n\\n    event UpdateImpliedRate(uint256 indexed timestamp, uint256 lnLastImpliedRate);\\n\\n    event IncreaseObservationCardinalityNext(\\n        uint16 observationCardinalityNextOld,\\n        uint16 observationCardinalityNextNew\\n    );\\n\\n    function mint(\\n        address receiver,\\n        uint256 netSyDesired,\\n        uint256 netPtDesired\\n    ) external returns (uint256 netLpOut, uint256 netSyUsed, uint256 netPtUsed);\\n\\n    function burn(\\n        address receiverSy,\\n        address receiverPt,\\n        uint256 netLpToBurn\\n    ) external returns (uint256 netSyOut, uint256 netPtOut);\\n\\n    function swapExactPtForSy(\\n        address receiver,\\n        uint256 exactPtIn,\\n        bytes calldata data\\n    ) external returns (uint256 netSyOut, uint256 netSyFee);\\n\\n    function swapSyForExactPt(\\n        address receiver,\\n        uint256 exactPtOut,\\n        bytes calldata data\\n    ) external returns (uint256 netSyIn, uint256 netSyFee);\\n\\n    function redeemRewards(address user) external returns (uint256[] memory);\\n\\n    function readState(address router) external view returns (MarketState memory market);\\n\\n    function observe(uint32[] memory secondsAgos) external view returns (uint216[] memory lnImpliedRateCumulative);\\n\\n    function increaseObservationsCardinalityNext(uint16 cardinalityNext) external;\\n\\n    function readTokens() external view returns (IStandardizedYield _SY, IPPrincipalToken _PT, IPYieldToken _YT);\\n\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    function isExpired() external view returns (bool);\\n\\n    function expiry() external view returns (uint256);\\n\\n    function observations(\\n        uint256 index\\n    ) external view returns (uint32 blockTimestamp, uint216 lnImpliedRateCumulative, bool initialized);\\n\\n    function _storage()\\n        external\\n        view\\n        returns (\\n            int128 totalPt,\\n            int128 totalSy,\\n            uint96 lastLnImpliedRate,\\n            uint16 observationIndex,\\n            uint16 observationCardinality,\\n            uint16 observationCardinalityNext\\n        );\\n}\\n\",\"keccak256\":\"0xcae6ee152a68790029af41459c47cdd44964467f47a855caee78394ea09ad8df\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPPrincipalToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IPPrincipalToken is IERC20Metadata {\\n    function burnByYT(address user, uint256 amount) external;\\n\\n    function mintByYT(address user, uint256 amount) external;\\n\\n    function initialize(address _YT) external;\\n\\n    function SY() external view returns (address);\\n\\n    function YT() external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function expiry() external view returns (uint256);\\n\\n    function isExpired() external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0879ef0ffafe2ed731c7fe2a0281b602840c4bc715acf4e701ca51a17876fd0f\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IPYieldToken.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"./IRewardManager.sol\\\";\\nimport \\\"./IPInterestManagerYT.sol\\\";\\n\\ninterface IPYieldToken is IERC20Metadata, IRewardManager, IPInterestManagerYT {\\n    event NewInterestIndex(uint256 indexed newIndex);\\n\\n    event Mint(\\n        address indexed caller,\\n        address indexed receiverPT,\\n        address indexed receiverYT,\\n        uint256 amountSyToMint,\\n        uint256 amountPYOut\\n    );\\n\\n    event Burn(address indexed caller, address indexed receiver, uint256 amountPYToRedeem, uint256 amountSyOut);\\n\\n    event RedeemRewards(address indexed user, uint256[] amountRewardsOut);\\n\\n    event RedeemInterest(address indexed user, uint256 interestOut);\\n\\n    event CollectRewardFee(address indexed rewardToken, uint256 amountRewardFee);\\n\\n    function mintPY(address receiverPT, address receiverYT) external returns (uint256 amountPYOut);\\n\\n    function redeemPY(address receiver) external returns (uint256 amountSyOut);\\n\\n    function redeemPYMulti(\\n        address[] calldata receivers,\\n        uint256[] calldata amountPYToRedeems\\n    ) external returns (uint256[] memory amountSyOuts);\\n\\n    function redeemDueInterestAndRewards(\\n        address user,\\n        bool redeemInterest,\\n        bool redeemRewards\\n    ) external returns (uint256 interestOut, uint256[] memory rewardsOut);\\n\\n    function rewardIndexesCurrent() external returns (uint256[] memory);\\n\\n    function pyIndexCurrent() external returns (uint256);\\n\\n    function pyIndexStored() external view returns (uint256);\\n\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    function SY() external view returns (address);\\n\\n    function PT() external view returns (address);\\n\\n    function factory() external view returns (address);\\n\\n    function expiry() external view returns (uint256);\\n\\n    function isExpired() external view returns (bool);\\n\\n    function doCacheIndexSameBlock() external view returns (bool);\\n\\n    function pyIndexLastUpdatedBlock() external view returns (uint128);\\n}\\n\",\"keccak256\":\"0xcf0a3e1860a9f7b979723d8585196664dc0aa0258a9f4d71170d86e1ffdfb93d\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IRewardManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\ninterface IRewardManager {\\n    function userReward(address token, address user) external view returns (uint128 index, uint128 accrued);\\n}\\n\",\"keccak256\":\"0x8dfa58280700390049f9bdc27bcc6daa9f34aa53fba2d47a5c5bb3d1462ca604\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/interfaces/IStandardizedYield.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\n/*\\n * MIT License\\n * ===========\\n *\\n * Permission is hereby granted, free of charge, to any person obtaining a copy\\n * of this software and associated documentation files (the \\\"Software\\\"), to deal\\n * in the Software without restriction, including without limitation the rights\\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\\n * copies of the Software, and to permit persons to whom the Software is\\n * furnished to do so, subject to the following conditions:\\n *\\n * The above copyright notice and this permission notice shall be included in all\\n * copies or substantial portions of the Software.\\n *\\n * THE SOFTWARE IS PROVIDED \\\"AS IS\\\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\\n */\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\n\\ninterface IStandardizedYield is IERC20Metadata {\\n    /// @dev Emitted when any base tokens is deposited to mint shares\\n    event Deposit(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed tokenIn,\\n        uint256 amountDeposited,\\n        uint256 amountSyOut\\n    );\\n\\n    /// @dev Emitted when any shares are redeemed for base tokens\\n    event Redeem(\\n        address indexed caller,\\n        address indexed receiver,\\n        address indexed tokenOut,\\n        uint256 amountSyToRedeem,\\n        uint256 amountTokenOut\\n    );\\n\\n    /// @dev check `assetInfo()` for more information\\n    enum AssetType {\\n        TOKEN,\\n        LIQUIDITY\\n    }\\n\\n    /// @dev Emitted when (`user`) claims their rewards\\n    event ClaimRewards(address indexed user, address[] rewardTokens, uint256[] rewardAmounts);\\n\\n    /**\\n     * @notice mints an amount of shares by depositing a base token.\\n     * @param receiver shares recipient address\\n     * @param tokenIn address of the base tokens to mint shares\\n     * @param amountTokenToDeposit amount of base tokens to be transferred from (`msg.sender`)\\n     * @param minSharesOut reverts if amount of shares minted is lower than this\\n     * @return amountSharesOut amount of shares minted\\n     * @dev Emits a {Deposit} event\\n     *\\n     * Requirements:\\n     * - (`tokenIn`) must be a valid base token.\\n     */\\n    function deposit(\\n        address receiver,\\n        address tokenIn,\\n        uint256 amountTokenToDeposit,\\n        uint256 minSharesOut\\n    ) external payable returns (uint256 amountSharesOut);\\n\\n    /**\\n     * @notice redeems an amount of base tokens by burning some shares\\n     * @param receiver recipient address\\n     * @param amountSharesToRedeem amount of shares to be burned\\n     * @param tokenOut address of the base token to be redeemed\\n     * @param minTokenOut reverts if amount of base token redeemed is lower than this\\n     * @param burnFromInternalBalance if true, burns from balance of `address(this)`, otherwise burns from `msg.sender`\\n     * @return amountTokenOut amount of base tokens redeemed\\n     * @dev Emits a {Redeem} event\\n     *\\n     * Requirements:\\n     * - (`tokenOut`) must be a valid base token.\\n     */\\n    function redeem(\\n        address receiver,\\n        uint256 amountSharesToRedeem,\\n        address tokenOut,\\n        uint256 minTokenOut,\\n        bool burnFromInternalBalance\\n    ) external returns (uint256 amountTokenOut);\\n\\n    /**\\n     * @notice exchangeRate * syBalance / 1e18 must return the asset balance of the account\\n     * @notice vice-versa, if a user uses some amount of tokens equivalent to X asset, the amount of sy\\n     he can mint must be X * exchangeRate / 1e18\\n     * @dev SYUtils's assetToSy & syToAsset should be used instead of raw multiplication\\n     & division\\n     */\\n    function exchangeRate() external view returns (uint256 res);\\n\\n    /**\\n     * @notice claims reward for (`user`)\\n     * @param user the user receiving their rewards\\n     * @return rewardAmounts an array of reward amounts in the same order as `getRewardTokens`\\n     * @dev\\n     * Emits a `ClaimRewards` event\\n     * See {getRewardTokens} for list of reward tokens\\n     */\\n    function claimRewards(address user) external returns (uint256[] memory rewardAmounts);\\n\\n    /**\\n     * @notice get the amount of unclaimed rewards for (`user`)\\n     * @param user the user to check for\\n     * @return rewardAmounts an array of reward amounts in the same order as `getRewardTokens`\\n     */\\n    function accruedRewards(address user) external view returns (uint256[] memory rewardAmounts);\\n\\n    function rewardIndexesCurrent() external returns (uint256[] memory indexes);\\n\\n    function rewardIndexesStored() external view returns (uint256[] memory indexes);\\n\\n    /**\\n     * @notice returns the list of reward token addresses\\n     */\\n    function getRewardTokens() external view returns (address[] memory);\\n\\n    /**\\n     * @notice returns the address of the underlying yield token\\n     */\\n    function yieldToken() external view returns (address);\\n\\n    /**\\n     * @notice returns all tokens that can mint this SY\\n     */\\n    function getTokensIn() external view returns (address[] memory res);\\n\\n    /**\\n     * @notice returns all tokens that can be redeemed by this SY\\n     */\\n    function getTokensOut() external view returns (address[] memory res);\\n\\n    function isValidTokenIn(address token) external view returns (bool);\\n\\n    function isValidTokenOut(address token) external view returns (bool);\\n\\n    function previewDeposit(\\n        address tokenIn,\\n        uint256 amountTokenToDeposit\\n    ) external view returns (uint256 amountSharesOut);\\n\\n    function previewRedeem(\\n        address tokenOut,\\n        uint256 amountSharesToRedeem\\n    ) external view returns (uint256 amountTokenOut);\\n\\n    /**\\n     * @notice This function contains information to interpret what the asset is\\n     * @return assetType the type of the asset (0 for ERC20 tokens, 1 for AMM liquidity tokens,\\n        2 for bridged yield bearing tokens like wstETH, rETH on Arbi whose the underlying asset doesn't exist on the chain)\\n     * @return assetAddress the address of the asset\\n     * @return assetDecimals the decimals of the asset\\n     */\\n    function assetInfo() external view returns (AssetType assetType, address assetAddress, uint8 assetDecimals);\\n}\\n\",\"keccak256\":\"0xe85f1526becc30e49ec0d4a42f01c54cc655fb1f815df2c71684fb76c9214ba5\",\"license\":\"GPL-3.0-or-later\"},\"@pendle/core-v2/contracts/oracles/PendlePYOracleLib.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-or-later\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IPMarket.sol\\\";\\nimport \\\"../core/libraries/math/PMath.sol\\\";\\n\\n// This library can & should be integrated directly for optimal gas usage.\\n// If you prefer not to integrate it directly, the PendlePtOracle contract (a pre-deployed version of this contract) can be used.\\nlibrary PendlePYOracleLib {\\n    using PMath for uint256;\\n    using PMath for int256;\\n\\n    /**\\n     * This function returns the twap rate PT/Asset on market, but take into account the current rate of SY\\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\\n     * @param market market to get rate from\\n     * @param duration twap duration\\n     */\\n    function getPtToAssetRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getPtToAssetRateRaw(market, duration);\\n        } else {\\n            return (getPtToAssetRateRaw(market, duration) * syIndex) / pyIndex;\\n        }\\n    }\\n\\n    /**\\n     * This function returns the twap rate YT/Asset on market, but take into account the current rate of SY\\n     This is to account for special cases where underlying asset becomes insolvent and has decreasing exchangeRate\\n     * @param market market to get rate from\\n     * @param duration twap duration\\n     */\\n    function getYtToAssetRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getYtToAssetRateRaw(market, duration);\\n        } else {\\n            return (getYtToAssetRateRaw(market, duration) * syIndex) / pyIndex;\\n        }\\n    }\\n\\n    /// @notice Similar to getPtToAsset but returns the rate in SY instead\\n    function getPtToSyRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getPtToAssetRateRaw(market, duration).divDown(syIndex);\\n        } else {\\n            return getPtToAssetRateRaw(market, duration).divDown(pyIndex);\\n        }\\n    }\\n\\n    /// @notice Similar to getPtToAsset but returns the rate in SY instead\\n    function getYtToSyRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        (uint256 syIndex, uint256 pyIndex) = getSYandPYIndexCurrent(market);\\n        if (syIndex >= pyIndex) {\\n            return getYtToAssetRateRaw(market, duration).divDown(syIndex);\\n        } else {\\n            return getYtToAssetRateRaw(market, duration).divDown(pyIndex);\\n        }\\n    }\\n\\n    /// @notice returns the raw rate without taking into account whether SY is solvent\\n    function getPtToAssetRateRaw(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        uint256 expiry = market.expiry();\\n\\n        if (expiry <= block.timestamp) {\\n            return PMath.ONE;\\n        } else {\\n            uint256 lnImpliedRate = getMarketLnImpliedRate(market, duration);\\n            uint256 timeToExpiry = expiry - block.timestamp;\\n            uint256 assetToPtRate = MarketMathCore._getExchangeRateFromImpliedRate(lnImpliedRate, timeToExpiry).Uint();\\n            return PMath.ONE.divDown(assetToPtRate);\\n        }\\n    }\\n\\n    /// @notice returns the raw rate without taking into account whether SY is solvent\\n    function getYtToAssetRateRaw(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        return PMath.ONE - getPtToAssetRateRaw(market, duration);\\n    }\\n\\n    function getSYandPYIndexCurrent(IPMarket market) internal view returns (uint256 syIndex, uint256 pyIndex) {\\n        (IStandardizedYield SY, , IPYieldToken YT) = market.readTokens();\\n\\n        syIndex = SY.exchangeRate();\\n        uint256 pyIndexStored = YT.pyIndexStored();\\n\\n        if (YT.doCacheIndexSameBlock() && YT.pyIndexLastUpdatedBlock() == block.number) {\\n            pyIndex = pyIndexStored;\\n        } else {\\n            pyIndex = PMath.max(syIndex, pyIndexStored);\\n        }\\n    }\\n\\n    function getMarketLnImpliedRate(IPMarket market, uint32 duration) internal view returns (uint256) {\\n        uint32[] memory durations = new uint32[](2);\\n        durations[0] = duration;\\n\\n        uint216[] memory lnImpliedRateCumulative = market.observe(durations);\\n        return (lnImpliedRateCumulative[1] - lnImpliedRateCumulative[0]) / duration;\\n    }\\n}\\n\",\"keccak256\":\"0x4898143e60da86e86cd79019d6c6b5606a3b23f692c7c6e76ae1683c89afd6e4\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAggregatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n\\npragma solidity ^0.8.12;\\n\\ninterface IAggregatorInterface {\\n    function decimals() external view returns (uint8);\\n\\n    function latestAnswer() external view returns (int256);\\n}\\n\",\"keccak256\":\"0xeca20689903c3ceb13d6ced33dc0a3a1f36a9b0131ed62ef6b604253d3f361b9\",\"license\":\"GPL-3.0\"},\"contracts/pendle/BaseFeedPTPendleAave.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n\\npragma solidity ^0.8.12;\\n\\nimport {IAggregatorInterface} from \\\"../interfaces/IAggregatorInterface.sol\\\";\\nimport {BaseOraclePTPendle} from \\\"./BaseOraclePTPendle.sol\\\";\\n\\ninterface IAaveOracle {\\n    function getAssetPrice(address asset) external view returns (uint256);\\n}\\n\\n/// @title BaseFeedPtPendle\\n/// @author Zerolend\\n/// @notice Base Contract to implement the AggregatorV2V3Interface for Pendle PT tokens\\nabstract contract BaseFeedPTPendleAave is\\n    IAggregatorInterface,\\n    BaseOraclePTPendle\\n{\\n    /// @notice The address of the asset to USD aggregator\\n    IAaveOracle public oracle;\\n\\n    /// @notice Constructor for an oracle following AggregatorV2V3Interface\\n    /// @param _maxImpliedRate The maximum implied rate for the underlying asset,\\n    /// if set well it allows to have a lower bound on the PT token price\\n    /// @param _twapDuration The duration of the TWAP used to calculate the PT price\\n    constructor(\\n        uint256 _maxImpliedRate,\\n        uint256 _maxUpperBound,\\n        uint32 _twapDuration,\\n        address _market,\\n        address _oracle,\\n        bool _enableBalanceCheck\\n    )\\n        BaseOraclePTPendle(\\n            _maxImpliedRate,\\n            _maxUpperBound,\\n            _twapDuration,\\n            _market,\\n            _enableBalanceCheck\\n        )\\n    {\\n        oracle = IAaveOracle(_oracle);\\n    }\\n\\n    /// @inheritdoc IAggregatorInterface\\n    function decimals() external pure override returns (uint8) {\\n        return 8;\\n    }\\n\\n    function rawPrice() external view returns (uint256) {\\n        return _getQuoteAmount();\\n    }\\n\\n    function usdPrice() public view returns (uint256) {\\n        return oracle.getAssetPrice(address(asset));\\n    }\\n\\n    /// @inheritdoc IAggregatorInterface\\n    /// @dev This function gives the latest answer in 8 decimals.\\n    function latestAnswer() external view returns (int256) {\\n        int256 value = int256(_getQuoteAmount());\\n        int256 assetToUsd = int256(usdPrice());\\n        return (value * assetToUsd) / int256(1e18);\\n    }\\n}\\n\",\"keccak256\":\"0x6f3a5192b2fec4a94e447e16f0e0ecb5405ac5efcec74c422d8f47d265db3ee7\",\"license\":\"GPL-3.0\"},\"contracts/pendle/BaseOraclePTPendle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n\\npragma solidity ^0.8.12;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IStandardizedYield, IPMarket} from \\\"@pendle/core-v2/contracts/interfaces/IPMarket.sol\\\";\\nimport {PendlePYOracleLib} from \\\"@pendle/core-v2/contracts/oracles/PendlePYOracleLib.sol\\\";\\n\\n/// @title BaseOraclePTPendle\\n/// @author Zerolend\\n/// @notice Base oracle implementation for PT tokens on Pendle\\nabstract contract BaseOraclePTPendle {\\n    uint256 public constant BASE_18 = 1 ether;\\n    uint256 public constant YEAR = 365 days;\\n\\n    uint256 public immutable maxLowerBound;\\n    uint256 public immutable maxUpperBound;\\n\\n    /// @notice The duration of the TWAP used to calculate the PT price\\n    uint32 public immutable twapDuration;\\n\\n    uint256 public immutable UNIT = 1e18;\\n\\n    IERC20 public immutable asset;\\n    IStandardizedYield public immutable sy;\\n    IPMarket public immutable market;\\n    uint256 public immutable maturity;\\n\\n    bool public enableBalanceCheck;\\n\\n    error TwapDurationTooLow();\\n\\n    constructor(\\n        uint256 _maxLowerBound,\\n        uint256 _maxUpperBound,\\n        uint32 _twapDuration,\\n        address _market,\\n        bool _enableBalanceCheck\\n    ) {\\n        if (_twapDuration < 15 minutes) revert TwapDurationTooLow();\\n        maxLowerBound = _maxLowerBound;\\n        twapDuration = _twapDuration;\\n        maxUpperBound = _maxUpperBound;\\n\\n        enableBalanceCheck = _enableBalanceCheck;\\n\\n        // read the market\\n        market = IPMarket(_market);\\n        (sy, , ) = market.readTokens();\\n        asset = IERC20(sy.yieldToken());\\n        maturity = market.expiry();\\n    }\\n\\n    // invariant: the price is bound by the maxUpperBound and the economical lower bound\\n    function _getQuoteAmount() internal view virtual returns (uint256 quote) {\\n        (uint256 pendlePrice, ) = _pendlePTPrice(market, twapDuration);\\n\\n        // set min-max limits\\n        pendlePrice = maxLowerBound < pendlePrice ? pendlePrice : maxLowerBound;\\n        pendlePrice = maxUpperBound > pendlePrice ? pendlePrice : maxUpperBound;\\n\\n        quote = (_detectHackRatio() * pendlePrice) / UNIT;\\n    }\\n\\n    /// @dev Depending on the market you should use\\n    ///       - getPtToSy() should be used if the underlying token is tradable,\\n    ///       - getPtToAsset() if not\\n    /// @dev https://docs.pendle.finance/Developers/Contracts/StandardizedYield#asset-of-sy--assetinfo-function\\n    function _pendlePTPrice(\\n        IPMarket _market,\\n        uint32 _twapDuration\\n    ) internal view virtual returns (uint256, uint256) {\\n        return (\\n            PendlePYOracleLib.getPtToAssetRate(_market, _twapDuration),\\n            UNIT\\n        );\\n    }\\n\\n    function _detectHackRatio() internal view returns (uint256) {\\n        if (!enableBalanceCheck) return UNIT;\\n        uint256 assetBalanceSY = asset.balanceOf(address(sy));\\n        uint256 totalSupplySY = sy.totalSupply();\\n        return\\n            assetBalanceSY > totalSupplySY\\n                ? UNIT\\n                : (assetBalanceSY * UNIT) / totalSupplySY;\\n    }\\n}\\n\",\"keccak256\":\"0x9cc82cf5d31605a303a13c78e0c6b87456756b8d759839bc905ebd8a4293c360\",\"license\":\"GPL-3.0\"},\"contracts/pendle/implementations/mainnet/PTLBTCMar272025Oracle.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\n// \\u255a\\u2550\\u2550\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2550\\u255d\\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2554\\u2550\\u2550\\u2550\\u2588\\u2588\\u2557\\n//   \\u2588\\u2588\\u2588\\u2554\\u255d \\u2588\\u2588\\u2588\\u2588\\u2588\\u2557  \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n//  \\u2588\\u2588\\u2588\\u2554\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u255d  \\u2588\\u2588\\u2554\\u2550\\u2550\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551   \\u2588\\u2588\\u2551\\n// \\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2557\\u2588\\u2588\\u2551  \\u2588\\u2588\\u2551\\u255a\\u2588\\u2588\\u2588\\u2588\\u2588\\u2588\\u2554\\u255d\\n// \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\u255a\\u2550\\u255d  \\u255a\\u2550\\u255d \\u255a\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d\\n\\n// Website: https://zerolend.xyz\\n// Discord: https://discord.gg/zerolend\\n// Twitter: https://twitter.com/zerolendxyz\\n\\npragma solidity ^0.8.12;\\n\\nimport \\\"../../BaseFeedPTPendleAave.sol\\\";\\n\\n/// @title PTLBTCMar272025Oracle\\n/// @author Zerolend.\\n/// @notice Gives the price of PT-LBTC in ETH in base 8\\ncontract PTLBTCMar272025Oracle is BaseFeedPTPendleAave {\\n    string public constant description = \\\"PT-LBTC/USD Oracle Mar 27 2025\\\";\\n\\n    constructor()\\n        BaseFeedPTPendleAave(\\n            85e18 / 100, // lower bound is -15%  - 0.85\\n            100e18 / 100, // upper bound is +0%  - 1.00\\n            4 * 30 * 60, // 4hr TWAP\\n            0x70B70Ac0445C3eF04E314DFdA6caafd825428221, // Pendle Market\\n            0xad19a55354614913B373E01da768ab679ac4DA41, // ZeroLend BTC Market oracle\\n            true\\n        )\\n    {\\n        // nothing\\n    }\\n}\\n\",\"keccak256\":\"0xc6ab8055b21b9590f001ae962e51e57a5481c17a99b45451479a57e22ff855ee\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x610180604052670de0b6b3a764000060e0908152503480156200002157600080fd5b50670bcbce7f1b150000670de0b6b3a7640000611c207370b70ac0445c3ef04e314dfda6caafd82542822173ad19a55354614913b373e01da768ab679ac4da41600185858585846103848363ffffffff161015620000ab576040517fd72bb8f000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b84608081815250508263ffffffff1660c08163ffffffff16815250508360a08181525050806000806101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff166101408173ffffffffffffffffffffffffffffffffffffffff16815250506101405173ffffffffffffffffffffffffffffffffffffffff16632c8ce6bc6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156200016c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200019291906200044a565b9050508073ffffffffffffffffffffffffffffffffffffffff166101209073ffffffffffffffffffffffffffffffffffffffff16815250506101205173ffffffffffffffffffffffffffffffffffffffff166376d5de856040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000219573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200023f9190620004d7565b73ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250506101405173ffffffffffffffffffffffffffffffffffffffff1663e184c9be6040518163ffffffff1660e01b8152600401602060405180830381865afa158015620002c2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620002e8919062000544565b6101608181525050505050505081600060016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505062000576565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620003748262000347565b9050919050565b6000620003888262000367565b9050919050565b6200039a816200037b565b8114620003a657600080fd5b50565b600081519050620003ba816200038f565b92915050565b6000620003cd8262000367565b9050919050565b620003df81620003c0565b8114620003eb57600080fd5b50565b600081519050620003ff81620003d4565b92915050565b6000620004128262000367565b9050919050565b620004248162000405565b81146200043057600080fd5b50565b600081519050620004448162000419565b92915050565b60008060006060848603121562000466576200046562000342565b5b60006200047686828701620003a9565b93505060206200048986828701620003ee565b92505060406200049c8682870162000433565b9150509250925092565b620004b18162000367565b8114620004bd57600080fd5b50565b600081519050620004d181620004a6565b92915050565b600060208284031215620004f057620004ef62000342565b5b60006200050084828501620004c0565b91505092915050565b6000819050919050565b6200051e8162000509565b81146200052a57600080fd5b50565b6000815190506200053e8162000513565b92915050565b6000602082840312156200055d576200055c62000342565b5b60006200056d848285016200052d565b91505092915050565b60805160a05160c05160e051610100516101205161014051610160516120de62000645600039600061033401526000818161056001526105d3015260008181610310015281816107b701526108390152600081816103850152818161045a015261077b01526000818161059d015281816106bf0152818161071001528181610751015281816108d2015261090d01526000818161035801526105f40152600081816103f70152818161066f015261069501526000818161053c0152818161061e015261064401526120de6000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c80636619aa86116100a257806380f556051161007157806380f55605146102785780638391454014610296578063898e76e1146102b45780639d8e2177146102d2578063d965a5d2146102f05761010b565b80636619aa86146102005780637284e4161461021e5780637dc0d1d01461023c5780637e8b2d551461025a5761010b565b806338d52e0f116100de57806338d52e0f1461018857806350d25bcd146101a657806353046919146101c45780635e074007146101e25761010b565b8063181cc05b14610110578063204f83f91461012e57806326d895451461014c578063313ce5671461016a575b600080fd5b61011861030e565b60405161012591906115ce565b60405180910390f35b610136610332565b6040516101439190611602565b60405180910390f35b610154610356565b604051610161919061163c565b60405180910390f35b61017261037a565b60405161017f9190611673565b60405180910390f35b610190610383565b60405161019d91906116af565b60405180910390f35b6101ae6103a7565b6040516101bb91906116e3565b60405180910390f35b6101cc6103e6565b6040516101d99190611602565b60405180910390f35b6101ea6103f5565b6040516101f79190611602565b60405180910390f35b610208610419565b6040516102159190611602565b60405180910390f35b6102266104db565b604051610233919061178e565b60405180910390f35b610244610514565b60405161025191906117d1565b60405180910390f35b61026261053a565b60405161026f9190611602565b60405180910390f35b61028061055e565b60405161028d919061180d565b60405180910390f35b61029e610582565b6040516102ab9190611602565b60405180910390f35b6102bc61058a565b6040516102c99190611843565b60405180910390f35b6102da61059b565b6040516102e79190611602565b60405180910390f35b6102f86105bf565b6040516103059190611602565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006008905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806103b26105cb565b905060006103be610419565b9050670de0b6b3a764000081836103d5919061188d565b6103df9190611934565b9250505090565b60006103f06105cb565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3596f077f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161049591906119bf565b602060405180830381865afa1580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d69190611a1a565b905090565b6040518060400160405280601e81526020017f50542d4c4254432f555344204f7261636c65204d61722032372032303235000081525081565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6301e1338081565b60008054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b670de0b6b3a764000081565b6000806106187f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610701565b509050807f000000000000000000000000000000000000000000000000000000000000000010610668577f000000000000000000000000000000000000000000000000000000000000000061066a565b805b9050807f0000000000000000000000000000000000000000000000000000000000000000116106b9577f00000000000000000000000000000000000000000000000000000000000000006106bb565b805b90507f0000000000000000000000000000000000000000000000000000000000000000816106e761073a565b6106f19190611a47565b6106fb9190611a89565b91505090565b60008061070e8484610935565b7f0000000000000000000000000000000000000000000000000000000000000000915091509250929050565b60008060009054906101000a900460ff16610777577f00000000000000000000000000000000000000000000000000000000000000009050610932565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016107f291906119bf565b602060405180830381865afa15801561080f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108339190611a1a565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c69190611a1a565b905080821161090b57807f0000000000000000000000000000000000000000000000000000000000000000836108fc9190611a47565b6109069190611a89565b61092d565b7f00000000000000000000000000000000000000000000000000000000000000005b925050505b90565b60008060006109438561098c565b91509150808210610961576109588585610c06565b92505050610986565b808261096d8787610c06565b6109779190611a47565b6109819190611a89565b925050505b92915050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff16632c8ce6bc6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156109dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a019190611b74565b92505091508173ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a759190611a1a565b935060008173ffffffffffffffffffffffffffffffffffffffff1663d2a3584e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae89190611a1a565b90508173ffffffffffffffffffffffffffffffffffffffff1663516399df6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b599190611bf3565b8015610be45750438273ffffffffffffffffffffffffffffffffffffffff166360e0a9e16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd09190611c68565b6fffffffffffffffffffffffffffffffff16145b15610bf157809350610bfe565b610bfb8582610cee565b93505b505050915091565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e184c9be6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c789190611a1a565b9050428111610c9257670de0b6b3a7640000915050610ce8565b6000610c9e8585610d07565b905060004283610cae9190611c95565b90506000610cc4610cbf8484610e82565b610ec8565b9050610ce181670de0b6b3a7640000610edf90919063ffffffff16565b9450505050505b92915050565b6000818311610cfd5781610cff565b825b905092915050565b600080600267ffffffffffffffff811115610d2557610d24611cc9565b5b604051908082528060200260200182016040528015610d535781602001602082028036833780820191505090505b5090508281600081518110610d6b57610d6a611cf8565b5b602002602001019063ffffffff16908163ffffffff168152505060008473ffffffffffffffffffffffffffffffffffffffff1663883bdbfd836040518263ffffffff1660e01b8152600401610dc09190611de5565b600060405180830381865afa158015610ddd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e069190611f73565b90508363ffffffff1681600081518110610e2357610e22611cf8565b5b602002602001015182600181518110610e3f57610e3e611cf8565b5b6020026020010151610e519190611fbc565b610e5b919061200b565b7affffffffffffffffffffffffffffffffffffffffffffffffffffff169250505092915050565b6000806201518061016d610e969190611a47565b8385610ea29190611a47565b610eac9190611a89565b9050610ebf610eba82610f12565b610f49565b91505092915050565b600080821215610ed757600080fd5b819050919050565b600080670de0b6b3a764000084610ef69190611a47565b9050828181610f0857610f07611905565b5b0491505092915050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115610f4157600080fd5b819050919050565b60007ffffffffffffffffffffffffffffffffffffffffffffffffdc702bd3a30fc00008212158015610f84575068070c1cc73b00c800008213155b610fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fba90612088565b60405180910390fd5b6000821215610ff957610fd882600003610f49565b670de0b6b3a7640000800281610ff157610ff0611905565b5b05905061154a565b60006806f05b59d3b20000008312611039576806f05b59d3b200000083039250770195e54c5dd42177f53a27172fa9ec6302628270000000009050611071565b6803782dace9d9000000831261106b576803782dace9d9000000830392506b1425982cf597cd205cef73809050611070565b600190505b5b606483029250600068056bc75e2d63100000905068ad78ebc5ac6200000084126110d15768ad78ebc5ac620000008403935068056bc75e2d631000006e01855144814a7ff805980ff00840008202816110cd576110cc611905565b5b0590505b6856bc75e2d631000000841261111a576856bc75e2d6310000008403935068056bc75e2d631000006b02df0ab5a80a22c61ab5a70082028161111657611115611905565b5b0590505b682b5e3af16b18800000841261116157682b5e3af16b188000008403935068056bc75e2d63100000693f1fce3da636ea5cf85082028161115d5761115c611905565b5b0590505b6815af1d78b58c40000084126111a8576815af1d78b58c4000008403935068056bc75e2d63100000690127fa27722cc06cc5e28202816111a4576111a3611905565b5b0590505b680ad78ebc5ac620000084126111ee57680ad78ebc5ac62000008403935068056bc75e2d6310000068280e60114edb805d038202816111ea576111e9611905565b5b0590505b68056bc75e2d6310000084126112345768056bc75e2d631000008403935068056bc75e2d63100000680ebc5fb417461211108202816112305761122f611905565b5b0590505b6802b5e3af16b1880000841261127a576802b5e3af16b18800008403935068056bc75e2d631000006808f00f760a4b2db55d82028161127657611275611905565b5b0590505b68015af1d78b58c4000084126112c05768015af1d78b58c400008403935068056bc75e2d631000006806f5f17757889379378202816112bc576112bb611905565b5b0590505b600068056bc75e2d63100000905060008590508082019150600268056bc75e2d63100000878302816112f5576112f4611905565b5b058161130457611303611905565b5b0590508082019150600368056bc75e2d631000008783028161132957611328611905565b5b058161133857611337611905565b5b0590508082019150600468056bc75e2d631000008783028161135d5761135c611905565b5b058161136c5761136b611905565b5b0590508082019150600568056bc75e2d631000008783028161139157611390611905565b5b05816113a05761139f611905565b5b0590508082019150600668056bc75e2d63100000878302816113c5576113c4611905565b5b05816113d4576113d3611905565b5b0590508082019150600768056bc75e2d63100000878302816113f9576113f8611905565b5b058161140857611407611905565b5b0590508082019150600868056bc75e2d631000008783028161142d5761142c611905565b5b058161143c5761143b611905565b5b0590508082019150600968056bc75e2d631000008783028161146157611460611905565b5b05816114705761146f611905565b5b0590508082019150600a68056bc75e2d631000008783028161149557611494611905565b5b05816114a4576114a3611905565b5b0590508082019150600b68056bc75e2d63100000878302816114c9576114c8611905565b5b05816114d8576114d7611905565b5b0590508082019150600c68056bc75e2d63100000878302816114fd576114fc611905565b5b058161150c5761150b611905565b5b059050808201915060648468056bc75e2d631000008486028161153257611531611905565b5b05028161154257611541611905565b5b059450505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061159461158f61158a8461154f565b61156f565b61154f565b9050919050565b60006115a682611579565b9050919050565b60006115b88261159b565b9050919050565b6115c8816115ad565b82525050565b60006020820190506115e360008301846115bf565b92915050565b6000819050919050565b6115fc816115e9565b82525050565b600060208201905061161760008301846115f3565b92915050565b600063ffffffff82169050919050565b6116368161161d565b82525050565b6000602082019050611651600083018461162d565b92915050565b600060ff82169050919050565b61166d81611657565b82525050565b60006020820190506116886000830184611664565b92915050565b60006116998261159b565b9050919050565b6116a98161168e565b82525050565b60006020820190506116c460008301846116a0565b92915050565b6000819050919050565b6116dd816116ca565b82525050565b60006020820190506116f860008301846116d4565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561173857808201518184015260208101905061171d565b60008484015250505050565b6000601f19601f8301169050919050565b6000611760826116fe565b61176a8185611709565b935061177a81856020860161171a565b61178381611744565b840191505092915050565b600060208201905081810360008301526117a88184611755565b905092915050565b60006117bb8261159b565b9050919050565b6117cb816117b0565b82525050565b60006020820190506117e660008301846117c2565b92915050565b60006117f78261159b565b9050919050565b611807816117ec565b82525050565b600060208201905061182260008301846117fe565b92915050565b60008115159050919050565b61183d81611828565b82525050565b60006020820190506118586000830184611834565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611898826116ca565b91506118a3836116ca565b92508282026118b1816116ca565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156118e9576118e861185e565b5b82820584148315176118fe576118fd61185e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061193f826116ca565b915061194a836116ca565b92508261195a57611959611905565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156119935761199261185e565b5b828205905092915050565b60006119a98261154f565b9050919050565b6119b98161199e565b82525050565b60006020820190506119d460008301846119b0565b92915050565b6000604051905090565b600080fd5b600080fd5b6119f7816115e9565b8114611a0257600080fd5b50565b600081519050611a14816119ee565b92915050565b600060208284031215611a3057611a2f6119e4565b5b6000611a3e84828501611a05565b91505092915050565b6000611a52826115e9565b9150611a5d836115e9565b9250828202611a6b816115e9565b91508282048414831517611a8257611a8161185e565b5b5092915050565b6000611a94826115e9565b9150611a9f836115e9565b925082611aaf57611aae611905565b5b828204905092915050565b6000611ac58261199e565b9050919050565b611ad581611aba565b8114611ae057600080fd5b50565b600081519050611af281611acc565b92915050565b6000611b038261199e565b9050919050565b611b1381611af8565b8114611b1e57600080fd5b50565b600081519050611b3081611b0a565b92915050565b6000611b418261199e565b9050919050565b611b5181611b36565b8114611b5c57600080fd5b50565b600081519050611b6e81611b48565b92915050565b600080600060608486031215611b8d57611b8c6119e4565b5b6000611b9b86828701611ae3565b9350506020611bac86828701611b21565b9250506040611bbd86828701611b5f565b9150509250925092565b611bd081611828565b8114611bdb57600080fd5b50565b600081519050611bed81611bc7565b92915050565b600060208284031215611c0957611c086119e4565b5b6000611c1784828501611bde565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b611c4581611c20565b8114611c5057600080fd5b50565b600081519050611c6281611c3c565b92915050565b600060208284031215611c7e57611c7d6119e4565b5b6000611c8c84828501611c53565b91505092915050565b6000611ca0826115e9565b9150611cab836115e9565b9250828203905081811115611cc357611cc261185e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611d5c8161161d565b82525050565b6000611d6e8383611d53565b60208301905092915050565b6000602082019050919050565b6000611d9282611d27565b611d9c8185611d32565b9350611da783611d43565b8060005b83811015611dd8578151611dbf8882611d62565b9750611dca83611d7a565b925050600181019050611dab565b5085935050505092915050565b60006020820190508181036000830152611dff8184611d87565b905092915050565b600080fd5b611e1582611744565b810181811067ffffffffffffffff82111715611e3457611e33611cc9565b5b80604052505050565b6000611e476119da565b9050611e538282611e0c565b919050565b600067ffffffffffffffff821115611e7357611e72611cc9565b5b602082029050602081019050919050565b600080fd5b60007affffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b611eb981611e89565b8114611ec457600080fd5b50565b600081519050611ed681611eb0565b92915050565b6000611eef611eea84611e58565b611e3d565b90508083825260208201905060208402830185811115611f1257611f11611e84565b5b835b81811015611f3b5780611f278882611ec7565b845260208401935050602081019050611f14565b5050509392505050565b600082601f830112611f5a57611f59611e07565b5b8151611f6a848260208601611edc565b91505092915050565b600060208284031215611f8957611f886119e4565b5b600082015167ffffffffffffffff811115611fa757611fa66119e9565b5b611fb384828501611f45565b91505092915050565b6000611fc782611e89565b9150611fd283611e89565b925082820390507affffffffffffffffffffffffffffffffffffffffffffffffffffff8111156120055761200461185e565b5b92915050565b600061201682611e89565b915061202183611e89565b92508261203157612030611905565b5b828204905092915050565b7f496e76616c6964206578706f6e656e7400000000000000000000000000000000600082015250565b6000612072601083611709565b915061207d8261203c565b602082019050919050565b600060208201905081810360008301526120a181612065565b905091905056fea264697066735822122084705192ac70f289ddebb448ebc8f4d1c6ef03582cb40521b5219dfb8faf179864736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80636619aa86116100a257806380f556051161007157806380f55605146102785780638391454014610296578063898e76e1146102b45780639d8e2177146102d2578063d965a5d2146102f05761010b565b80636619aa86146102005780637284e4161461021e5780637dc0d1d01461023c5780637e8b2d551461025a5761010b565b806338d52e0f116100de57806338d52e0f1461018857806350d25bcd146101a657806353046919146101c45780635e074007146101e25761010b565b8063181cc05b14610110578063204f83f91461012e57806326d895451461014c578063313ce5671461016a575b600080fd5b61011861030e565b60405161012591906115ce565b60405180910390f35b610136610332565b6040516101439190611602565b60405180910390f35b610154610356565b604051610161919061163c565b60405180910390f35b61017261037a565b60405161017f9190611673565b60405180910390f35b610190610383565b60405161019d91906116af565b60405180910390f35b6101ae6103a7565b6040516101bb91906116e3565b60405180910390f35b6101cc6103e6565b6040516101d99190611602565b60405180910390f35b6101ea6103f5565b6040516101f79190611602565b60405180910390f35b610208610419565b6040516102159190611602565b60405180910390f35b6102266104db565b604051610233919061178e565b60405180910390f35b610244610514565b60405161025191906117d1565b60405180910390f35b61026261053a565b60405161026f9190611602565b60405180910390f35b61028061055e565b60405161028d919061180d565b60405180910390f35b61029e610582565b6040516102ab9190611602565b60405180910390f35b6102bc61058a565b6040516102c99190611843565b60405180910390f35b6102da61059b565b6040516102e79190611602565b60405180910390f35b6102f86105bf565b6040516103059190611602565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006008905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000806103b26105cb565b905060006103be610419565b9050670de0b6b3a764000081836103d5919061188d565b6103df9190611934565b9250505090565b60006103f06105cb565b905090565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b3596f077f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161049591906119bf565b602060405180830381865afa1580156104b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d69190611a1a565b905090565b6040518060400160405280601e81526020017f50542d4c4254432f555344204f7261636c65204d61722032372032303235000081525081565b600060019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b6301e1338081565b60008054906101000a900460ff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b670de0b6b3a764000081565b6000806106187f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610701565b509050807f000000000000000000000000000000000000000000000000000000000000000010610668577f000000000000000000000000000000000000000000000000000000000000000061066a565b805b9050807f0000000000000000000000000000000000000000000000000000000000000000116106b9577f00000000000000000000000000000000000000000000000000000000000000006106bb565b805b90507f0000000000000000000000000000000000000000000000000000000000000000816106e761073a565b6106f19190611a47565b6106fb9190611a89565b91505090565b60008061070e8484610935565b7f0000000000000000000000000000000000000000000000000000000000000000915091509250929050565b60008060009054906101000a900460ff16610777577f00000000000000000000000000000000000000000000000000000000000000009050610932565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166370a082317f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016107f291906119bf565b602060405180830381865afa15801561080f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108339190611a1a565b905060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c69190611a1a565b905080821161090b57807f0000000000000000000000000000000000000000000000000000000000000000836108fc9190611a47565b6109069190611a89565b61092d565b7f00000000000000000000000000000000000000000000000000000000000000005b925050505b90565b60008060006109438561098c565b91509150808210610961576109588585610c06565b92505050610986565b808261096d8787610c06565b6109779190611a47565b6109819190611a89565b925050505b92915050565b6000806000808473ffffffffffffffffffffffffffffffffffffffff16632c8ce6bc6040518163ffffffff1660e01b8152600401606060405180830381865afa1580156109dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a019190611b74565b92505091508173ffffffffffffffffffffffffffffffffffffffff16633ba0b9a96040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a759190611a1a565b935060008173ffffffffffffffffffffffffffffffffffffffff1663d2a3584e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ac4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae89190611a1a565b90508173ffffffffffffffffffffffffffffffffffffffff1663516399df6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b35573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b599190611bf3565b8015610be45750438273ffffffffffffffffffffffffffffffffffffffff166360e0a9e16040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bac573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bd09190611c68565b6fffffffffffffffffffffffffffffffff16145b15610bf157809350610bfe565b610bfb8582610cee565b93505b505050915091565b6000808373ffffffffffffffffffffffffffffffffffffffff1663e184c9be6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c789190611a1a565b9050428111610c9257670de0b6b3a7640000915050610ce8565b6000610c9e8585610d07565b905060004283610cae9190611c95565b90506000610cc4610cbf8484610e82565b610ec8565b9050610ce181670de0b6b3a7640000610edf90919063ffffffff16565b9450505050505b92915050565b6000818311610cfd5781610cff565b825b905092915050565b600080600267ffffffffffffffff811115610d2557610d24611cc9565b5b604051908082528060200260200182016040528015610d535781602001602082028036833780820191505090505b5090508281600081518110610d6b57610d6a611cf8565b5b602002602001019063ffffffff16908163ffffffff168152505060008473ffffffffffffffffffffffffffffffffffffffff1663883bdbfd836040518263ffffffff1660e01b8152600401610dc09190611de5565b600060405180830381865afa158015610ddd573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610e069190611f73565b90508363ffffffff1681600081518110610e2357610e22611cf8565b5b602002602001015182600181518110610e3f57610e3e611cf8565b5b6020026020010151610e519190611fbc565b610e5b919061200b565b7affffffffffffffffffffffffffffffffffffffffffffffffffffff169250505092915050565b6000806201518061016d610e969190611a47565b8385610ea29190611a47565b610eac9190611a89565b9050610ebf610eba82610f12565b610f49565b91505092915050565b600080821215610ed757600080fd5b819050919050565b600080670de0b6b3a764000084610ef69190611a47565b9050828181610f0857610f07611905565b5b0491505092915050565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821115610f4157600080fd5b819050919050565b60007ffffffffffffffffffffffffffffffffffffffffffffffffdc702bd3a30fc00008212158015610f84575068070c1cc73b00c800008213155b610fc3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fba90612088565b60405180910390fd5b6000821215610ff957610fd882600003610f49565b670de0b6b3a7640000800281610ff157610ff0611905565b5b05905061154a565b60006806f05b59d3b20000008312611039576806f05b59d3b200000083039250770195e54c5dd42177f53a27172fa9ec6302628270000000009050611071565b6803782dace9d9000000831261106b576803782dace9d9000000830392506b1425982cf597cd205cef73809050611070565b600190505b5b606483029250600068056bc75e2d63100000905068ad78ebc5ac6200000084126110d15768ad78ebc5ac620000008403935068056bc75e2d631000006e01855144814a7ff805980ff00840008202816110cd576110cc611905565b5b0590505b6856bc75e2d631000000841261111a576856bc75e2d6310000008403935068056bc75e2d631000006b02df0ab5a80a22c61ab5a70082028161111657611115611905565b5b0590505b682b5e3af16b18800000841261116157682b5e3af16b188000008403935068056bc75e2d63100000693f1fce3da636ea5cf85082028161115d5761115c611905565b5b0590505b6815af1d78b58c40000084126111a8576815af1d78b58c4000008403935068056bc75e2d63100000690127fa27722cc06cc5e28202816111a4576111a3611905565b5b0590505b680ad78ebc5ac620000084126111ee57680ad78ebc5ac62000008403935068056bc75e2d6310000068280e60114edb805d038202816111ea576111e9611905565b5b0590505b68056bc75e2d6310000084126112345768056bc75e2d631000008403935068056bc75e2d63100000680ebc5fb417461211108202816112305761122f611905565b5b0590505b6802b5e3af16b1880000841261127a576802b5e3af16b18800008403935068056bc75e2d631000006808f00f760a4b2db55d82028161127657611275611905565b5b0590505b68015af1d78b58c4000084126112c05768015af1d78b58c400008403935068056bc75e2d631000006806f5f17757889379378202816112bc576112bb611905565b5b0590505b600068056bc75e2d63100000905060008590508082019150600268056bc75e2d63100000878302816112f5576112f4611905565b5b058161130457611303611905565b5b0590508082019150600368056bc75e2d631000008783028161132957611328611905565b5b058161133857611337611905565b5b0590508082019150600468056bc75e2d631000008783028161135d5761135c611905565b5b058161136c5761136b611905565b5b0590508082019150600568056bc75e2d631000008783028161139157611390611905565b5b05816113a05761139f611905565b5b0590508082019150600668056bc75e2d63100000878302816113c5576113c4611905565b5b05816113d4576113d3611905565b5b0590508082019150600768056bc75e2d63100000878302816113f9576113f8611905565b5b058161140857611407611905565b5b0590508082019150600868056bc75e2d631000008783028161142d5761142c611905565b5b058161143c5761143b611905565b5b0590508082019150600968056bc75e2d631000008783028161146157611460611905565b5b05816114705761146f611905565b5b0590508082019150600a68056bc75e2d631000008783028161149557611494611905565b5b05816114a4576114a3611905565b5b0590508082019150600b68056bc75e2d63100000878302816114c9576114c8611905565b5b05816114d8576114d7611905565b5b0590508082019150600c68056bc75e2d63100000878302816114fd576114fc611905565b5b058161150c5761150b611905565b5b059050808201915060648468056bc75e2d631000008486028161153257611531611905565b5b05028161154257611541611905565b5b059450505050505b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600061159461158f61158a8461154f565b61156f565b61154f565b9050919050565b60006115a682611579565b9050919050565b60006115b88261159b565b9050919050565b6115c8816115ad565b82525050565b60006020820190506115e360008301846115bf565b92915050565b6000819050919050565b6115fc816115e9565b82525050565b600060208201905061161760008301846115f3565b92915050565b600063ffffffff82169050919050565b6116368161161d565b82525050565b6000602082019050611651600083018461162d565b92915050565b600060ff82169050919050565b61166d81611657565b82525050565b60006020820190506116886000830184611664565b92915050565b60006116998261159b565b9050919050565b6116a98161168e565b82525050565b60006020820190506116c460008301846116a0565b92915050565b6000819050919050565b6116dd816116ca565b82525050565b60006020820190506116f860008301846116d4565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561173857808201518184015260208101905061171d565b60008484015250505050565b6000601f19601f8301169050919050565b6000611760826116fe565b61176a8185611709565b935061177a81856020860161171a565b61178381611744565b840191505092915050565b600060208201905081810360008301526117a88184611755565b905092915050565b60006117bb8261159b565b9050919050565b6117cb816117b0565b82525050565b60006020820190506117e660008301846117c2565b92915050565b60006117f78261159b565b9050919050565b611807816117ec565b82525050565b600060208201905061182260008301846117fe565b92915050565b60008115159050919050565b61183d81611828565b82525050565b60006020820190506118586000830184611834565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611898826116ca565b91506118a3836116ca565b92508282026118b1816116ca565b91507f800000000000000000000000000000000000000000000000000000000000000084146000841216156118e9576118e861185e565b5b82820584148315176118fe576118fd61185e565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061193f826116ca565b915061194a836116ca565b92508261195a57611959611905565b5b600160000383147f8000000000000000000000000000000000000000000000000000000000000000831416156119935761199261185e565b5b828205905092915050565b60006119a98261154f565b9050919050565b6119b98161199e565b82525050565b60006020820190506119d460008301846119b0565b92915050565b6000604051905090565b600080fd5b600080fd5b6119f7816115e9565b8114611a0257600080fd5b50565b600081519050611a14816119ee565b92915050565b600060208284031215611a3057611a2f6119e4565b5b6000611a3e84828501611a05565b91505092915050565b6000611a52826115e9565b9150611a5d836115e9565b9250828202611a6b816115e9565b91508282048414831517611a8257611a8161185e565b5b5092915050565b6000611a94826115e9565b9150611a9f836115e9565b925082611aaf57611aae611905565b5b828204905092915050565b6000611ac58261199e565b9050919050565b611ad581611aba565b8114611ae057600080fd5b50565b600081519050611af281611acc565b92915050565b6000611b038261199e565b9050919050565b611b1381611af8565b8114611b1e57600080fd5b50565b600081519050611b3081611b0a565b92915050565b6000611b418261199e565b9050919050565b611b5181611b36565b8114611b5c57600080fd5b50565b600081519050611b6e81611b48565b92915050565b600080600060608486031215611b8d57611b8c6119e4565b5b6000611b9b86828701611ae3565b9350506020611bac86828701611b21565b9250506040611bbd86828701611b5f565b9150509250925092565b611bd081611828565b8114611bdb57600080fd5b50565b600081519050611bed81611bc7565b92915050565b600060208284031215611c0957611c086119e4565b5b6000611c1784828501611bde565b91505092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b611c4581611c20565b8114611c5057600080fd5b50565b600081519050611c6281611c3c565b92915050565b600060208284031215611c7e57611c7d6119e4565b5b6000611c8c84828501611c53565b91505092915050565b6000611ca0826115e9565b9150611cab836115e9565b9250828203905081811115611cc357611cc261185e565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b611d5c8161161d565b82525050565b6000611d6e8383611d53565b60208301905092915050565b6000602082019050919050565b6000611d9282611d27565b611d9c8185611d32565b9350611da783611d43565b8060005b83811015611dd8578151611dbf8882611d62565b9750611dca83611d7a565b925050600181019050611dab565b5085935050505092915050565b60006020820190508181036000830152611dff8184611d87565b905092915050565b600080fd5b611e1582611744565b810181811067ffffffffffffffff82111715611e3457611e33611cc9565b5b80604052505050565b6000611e476119da565b9050611e538282611e0c565b919050565b600067ffffffffffffffff821115611e7357611e72611cc9565b5b602082029050602081019050919050565b600080fd5b60007affffffffffffffffffffffffffffffffffffffffffffffffffffff82169050919050565b611eb981611e89565b8114611ec457600080fd5b50565b600081519050611ed681611eb0565b92915050565b6000611eef611eea84611e58565b611e3d565b90508083825260208201905060208402830185811115611f1257611f11611e84565b5b835b81811015611f3b5780611f278882611ec7565b845260208401935050602081019050611f14565b5050509392505050565b600082601f830112611f5a57611f59611e07565b5b8151611f6a848260208601611edc565b91505092915050565b600060208284031215611f8957611f886119e4565b5b600082015167ffffffffffffffff811115611fa757611fa66119e9565b5b611fb384828501611f45565b91505092915050565b6000611fc782611e89565b9150611fd283611e89565b925082820390507affffffffffffffffffffffffffffffffffffffffffffffffffffff8111156120055761200461185e565b5b92915050565b600061201682611e89565b915061202183611e89565b92508261203157612030611905565b5b828204905092915050565b7f496e76616c6964206578706f6e656e7400000000000000000000000000000000600082015250565b6000612072601083611709565b915061207d8261203c565b602082019050919050565b600060208201905081810360008301526120a181612065565b905091905056fea264697066735822122084705192ac70f289ddebb448ebc8f4d1c6ef03582cb40521b5219dfb8faf179864736f6c63430008140033",
  "devdoc": {
    "author": "Zerolend.",
    "kind": "dev",
    "methods": {
      "latestAnswer()": {
        "details": "This function gives the latest answer in 8 decimals."
      }
    },
    "title": "PTLBTCMar272025Oracle",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "oracle()": {
        "notice": "The address of the asset to USD aggregator"
      },
      "twapDuration()": {
        "notice": "The duration of the TWAP used to calculate the PT price"
      }
    },
    "notice": "Gives the price of PT-LBTC in ETH in base 8",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5427,
        "contract": "contracts/pendle/implementations/mainnet/PTLBTCMar272025Oracle.sol:PTLBTCMar272025Oracle",
        "label": "enableBalanceCheck",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5291,
        "contract": "contracts/pendle/implementations/mainnet/PTLBTCMar272025Oracle.sol:PTLBTCMar272025Oracle",
        "label": "oracle",
        "offset": 1,
        "slot": "0",
        "type": "t_contract(IAaveOracle)5282"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IAaveOracle)5282": {
        "encoding": "inplace",
        "label": "contract IAaveOracle",
        "numberOfBytes": "20"
      }
    }
  }
}